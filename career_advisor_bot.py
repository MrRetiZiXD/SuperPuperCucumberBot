
#  KODLAND - –í–°–ï–ì–î–ê –ë–´–õ–ò –ò –ë–£–î–£–¢ –õ–£–ß–®–ï–ô –®–ö–û–õ–û–ô –î–õ–Ø –ü–†–û–ì–†–ê–ú–ú–ò–°–¢–û–í! üëç

import os
import sqlite3
import json
import requests
import asyncio
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Tuple

from telegram import (
    Update, InlineKeyboardButton, InlineKeyboardMarkup, 
    ReplyKeyboardMarkup, KeyboardButton
)
from telegram.ext import (
    Application, CommandHandler, CallbackQueryHandler, 
    MessageHandler, ConversationHandler, ContextTypes, filters
)

BOT_TOKEN = os.getenv("BOT_TOKEN", "8474132149:AAHIinr4CEV53oYLZVnwu3pcxqQNrVxcWck")
DB_PATH = "career_advisor.db"
HH_API_URL = "https://api.hh.ru/vacancies"

(AGE_GROUP, EDUCATION, INTERESTS, SKILLS, CURRENT_JOB, 
 SATISFACTION, TEST_QUESTION, SEARCH_QUERY, TEST_ANSWER) = range(9)

CAREER_CATEGORIES = {
    "IT": "IT –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏",
    "CREATIVE": "–¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ –∏ –¥–∏–∑–∞–π–Ω", 
    "BUSINESS": "–ë–∏–∑–Ω–µ—Å –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ",
    "SCIENCE": "–ù–∞—É–∫–∞ –∏ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ",
    "MEDICAL": "–ú–µ–¥–∏—Ü–∏–Ω–∞ –∏ –∑–¥–æ—Ä–æ–≤—å–µ",
    "TECHNICAL": "–†–∞–±–æ—á–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏",
    "SERVICE": "–°—Ñ–µ—Ä–∞ —É—Å–ª—É–≥"
}

def init_database():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π —Å—Ö–µ–º–æ–π"""
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()

    c.execute("""
    CREATE TABLE IF NOT EXISTS users(
        user_id INTEGER PRIMARY KEY,
        first_name TEXT,
        username TEXT,
        age_group TEXT,
        education TEXT,
        interests TEXT,
        skills TEXT,
        current_job TEXT,
        satisfaction INTEGER,
        created_at TEXT,
        updated_at TEXT
    )""")
    
    c.execute("""
    CREATE TABLE IF NOT EXISTS careers(
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        name TEXT NOT NULL,
        category TEXT,
        description TEXT,
        skills_required TEXT,
        education_level TEXT,
        salary_range TEXT,
        tags TEXT,
        learning_resources TEXT,
        created_at TEXT
    )""")
    
    c.execute("""
    CREATE TABLE IF NOT EXISTS test_questions(
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        question_text TEXT NOT NULL,
        options TEXT NOT NULL,
        weights TEXT NOT NULL,
        category TEXT,
        order_num INTEGER
    )""")
    
    c.execute("""
    CREATE TABLE IF NOT EXISTS user_test_results(
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER,
        category TEXT,
        score INTEGER,
        test_date TEXT,
        FOREIGN KEY (user_id) REFERENCES users (user_id)
    )""")

    c.execute("""
    CREATE TABLE IF NOT EXISTS interactions(
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER,
        action TEXT,
        details TEXT,
        timestamp TEXT,
        FOREIGN KEY (user_id) REFERENCES users (user_id)
    )""")
    
    c.execute("""
    CREATE TABLE IF NOT EXISTS parsed_vacancies(
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        query TEXT,
        vacancy_data TEXT,
        created_at TEXT,
        expires_at TEXT
    )""")
    
    conn.commit()
    conn.close()

def seed_careers():
    """–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–µ—Å—Å–∏—è–º–∏"""
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()

    c.execute("SELECT COUNT(*) FROM careers")
    if c.fetchone()[0] > 0:
        conn.close()
        return
    
    careers_data = [
        ("Frontend —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫", "IT –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏", 
         "–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤ –¥–ª—è –≤–µ–±-—Å–∞–π—Ç–æ–≤ –∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π. –†–∞–±–æ—Ç–∞ —Å HTML, CSS, JavaScript –∏ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∞–º–∏.",
         "JavaScript,HTML,CSS,React,Vue.js,TypeScript", "–í–£–ó/–ö—É—Ä—Å—ã", "80000-200000",
         "–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ,–≤–µ–±,–¥–∏–∑–∞–π–Ω,–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã", "https://learn.javascript.ru/,https://react.dev/"),
        
        ("Backend —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫", "IT –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏",
         "–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ —Å–µ—Ä–≤–µ—Ä–Ω–æ–π —á–∞—Å—Ç–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π, —Ä–∞–±–æ—Ç–∞ —Å –±–∞–∑–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö, API –∏ –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–æ–π.",
         "Python,Java,C#,Node.js,SQL,PostgreSQL", "–í–£–ó/–ö—É—Ä—Å—ã", "90000-250000",
         "–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ,—Å–µ—Ä–≤–µ—Ä,–±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö,api", "https://docs.python.org/,https://spring.io/"),
        
        ("Data Scientist", "IT –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏",
         "–ê–Ω–∞–ª–∏–∑ –±–æ–ª—å—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö, —Å–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥–µ–ª–µ–π –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–Ω—Å–∞–π—Ç–æ–≤ –∏–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.",
         "Python,R,SQL,–º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ,—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "–í–£–ó", "120000-300000",
         "–¥–∞–Ω–Ω—ã–µ,–∞–Ω–∞–ª–∏—Ç–∏–∫–∞,–º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ,—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "https://scikit-learn.org/,https://pandas.pydata.org/"),
        
        ("DevOps –∏–Ω–∂–µ–Ω–µ—Ä", "IT –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏",
         "–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏, –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∏ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏.",
         "Docker,Kubernetes,AWS,Linux,CI/CD", "–í–£–ó/–ö—É—Ä—Å—ã", "100000-280000",
         "–∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è,–∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞,–æ–±–ª–∞–∫–æ,–º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥", "https://kubernetes.io/,https://docs.docker.com/"),
        
        ("QA —Ç–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫", "IT –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏",
         "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–≥–æ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è, –ø–æ–∏—Å–∫ –æ—à–∏–±–æ–∫ –∏ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–¥—É–∫—Ç–∞.",
         "—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ,–∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è,Selenium,Postman", "–ö—É—Ä—Å—ã/–û–ø—ã—Ç", "60000-150000",
         "—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ,–∫–∞—á–µ—Å—Ç–≤–æ,–∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è,–±–∞–≥-—Ä–µ–ø–æ—Ä—Ç—ã", "https://www.selenium.dev/,https://postman.com/"),
        
        ("–°–∏—Å—Ç–µ–º–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä", "IT –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏",
         "–ü–æ–¥–¥–µ—Ä–∂–∫–∞ IT-–∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã, –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤ –∏ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º.",
         "Linux,Windows,—Å–µ—Ç–∏,–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å,–º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥", "–í–£–ó/–ö—É—Ä—Å—ã", "70000-180000",
         "–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ,—Å–µ—Ä–≤–µ—Ä—ã,—Å–µ—Ç–∏,–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å", "https://www.redhat.com/,https://ubuntu.com/"),
        
        ("UX/UI –¥–∏–∑–∞–π–Ω–µ—Ä", "–¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ –∏ –¥–∏–∑–∞–π–Ω",
         "–ü—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –æ–ø—ã—Ç–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —É–¥–æ–±–Ω—ã—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤ –¥–ª—è —Ü–∏—Ñ—Ä–æ–≤—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤.",
         "Figma,Sketch,Adobe XD,–ø—Ä–æ—Ç–æ—Ç–∏–ø–∏—Ä–æ–≤–∞–Ω–∏–µ,–∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è", "–ö—É—Ä—Å—ã/–ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ", "80000-200000",
         "–¥–∏–∑–∞–π–Ω,–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã,–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –æ–ø—ã—Ç,–∫—Ä–µ–∞—Ç–∏–≤", "https://www.figma.com/,https://uxdesign.cc/"),
        
        ("–ì—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –¥–∏–∑–∞–π–Ω–µ—Ä", "–¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ –∏ –¥–∏–∑–∞–π–Ω",
         "–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–∑—É–∞–ª—å–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤: –ª–æ–≥–æ—Ç–∏–ø—ã, –ø–ª–∞–∫–∞—Ç—ã, —É–ø–∞–∫–æ–≤–∫–∞, –±—Ä–µ–Ω–¥–∏–Ω–≥ –∏ —Ä–µ–∫–ª–∞–º–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã.",
         "Photoshop,Illustrator,InDesign,—Ç–∏–ø–æ–≥—Ä–∞—Ñ–∏–∫–∞,–±—Ä–µ–Ω–¥–∏–Ω–≥", "–ö—É—Ä—Å—ã/–ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ", "50000-150000",
         "–¥–∏–∑–∞–π–Ω,–≥—Ä–∞—Ñ–∏–∫–∞,–±—Ä–µ–Ω–¥–∏–Ω–≥,–∫—Ä–µ–∞—Ç–∏–≤,—Ä–µ–∫–ª–∞–º–∞", "https://www.adobe.com/,https://www.behance.net/"),
        
        ("–í–µ–±-–¥–∏–∑–∞–π–Ω–µ—Ä", "–¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ –∏ –¥–∏–∑–∞–π–Ω",
         "–°–æ–∑–¥–∞–Ω–∏–µ –¥–∏–∑–∞–π–Ω–∞ –≤–µ–±-—Å–∞–π—Ç–æ–≤, —Ä–∞–±–æ—Ç–∞ —Å –º–∞–∫–µ—Ç–∞–º–∏ –∏ –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º.",
         "Figma,Photoshop,HTML,CSS,–∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π –¥–∏–∑–∞–π–Ω", "–ö—É—Ä—Å—ã/–ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ", "60000-160000",
         "–¥–∏–∑–∞–π–Ω,–≤–µ–±,–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã,–∫—Ä–µ–∞—Ç–∏–≤,–º–∞–∫–µ—Ç—ã", "https://www.figma.com/,https://webflow.com/"),
        
        ("–ö–æ–Ω—Ç–µ–Ω—Ç-–º–µ–π–∫–µ—Ä", "–¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ –∏ –¥–∏–∑–∞–π–Ω",
         "–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π, –±–ª–æ–≥–æ–≤ –∏ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã—Ö –∫–∞–º–ø–∞–Ω–∏–π.",
         "–∫–æ–ø–∏—Ä–∞–π—Ç–∏–Ω–≥,—Ñ–æ—Ç–æ,–≤–∏–¥–µ–æ,SMM,–∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å", "–û–ø—ã—Ç/–ö—É—Ä—Å—ã", "40000-120000",
         "–∫–æ–Ω—Ç–µ–Ω—Ç,—Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏,–∫—Ä–µ–∞—Ç–∏–≤,–º–∞—Ä–∫–µ—Ç–∏–Ω–≥", "https://canva.com/,https://www.instagram.com/"),
        
        ("–í–∏–¥–µ–æ–º–æ–Ω—Ç–∞–∂–µ—Ä", "–¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ –∏ –¥–∏–∑–∞–π–Ω",
         "–ú–æ–Ω—Ç–∞–∂ –≤–∏–¥–µ–æ, —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–æ–ª–∏–∫–æ–≤ –¥–ª—è YouTube, —Ä–µ–∫–ª–∞–º—ã –∏ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞.",
         "Premiere Pro,After Effects,DaVinci Resolve,—Ü–≤–µ—Ç–æ–∫–æ—Ä—Ä–µ–∫—Ü–∏—è", "–ö—É—Ä—Å—ã/–û–ø—ã—Ç", "50000-150000",
         "–≤–∏–¥–µ–æ,–º–æ–Ω—Ç–∞–∂,–∫—Ä–µ–∞—Ç–∏–≤,–ø–æ—Å—Ç–ø—Ä–æ–¥–∞–∫—à–Ω", "https://www.adobe.com/,https://www.blackmagicdesign.com/"),
        
        ("–ú–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ–µ–∫—Ç–æ–≤", "–ë–∏–∑–Ω–µ—Å –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ",
         "–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤, —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π –∏ –∫–æ–Ω—Ç—Ä–æ–ª—å —Å—Ä–æ–∫–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.",
         "–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ,—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ,–∫–æ–º–∞–Ω–¥–∞,–∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏,Agile", "–í–£–ó/–ö—É—Ä—Å—ã", "80000-200000",
         "—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ,–ø—Ä–æ–µ–∫—Ç—ã,–∫–æ–º–∞–Ω–¥–∞,–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ", "https://www.pmi.org/,https://scrum.org/"),
        
        ("–ú–∞—Ä–∫–µ—Ç–æ–ª–æ–≥", "–ë–∏–∑–Ω–µ—Å –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ",
         "–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π, –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏ –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞.",
         "–∞–Ω–∞–ª–∏—Ç–∏–∫–∞,—Ä–µ–∫–ª–∞–º–∞,SMM,–∫–æ–Ω—Ç–µ–Ω—Ç-–º–∞—Ä–∫–µ—Ç–∏–Ω–≥,SEO", "–í–£–ó/–ö—É—Ä—Å—ã", "70000-180000",
         "–º–∞—Ä–∫–µ—Ç–∏–Ω–≥,—Ä–µ–∫–ª–∞–º–∞,–∞–Ω–∞–ª–∏—Ç–∏–∫–∞,–ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ", "https://www.google.com/analytics/,https://ads.google.com/"),
        
        ("HR-–º–µ–Ω–µ–¥–∂–µ—Ä", "–ë–∏–∑–Ω–µ—Å –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ",
         "–ü–æ–¥–±–æ—Ä –ø–µ—Ä—Å–æ–Ω–∞–ª–∞, —Ä–∞–±–æ—Ç–∞ —Å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏, —Ä–∞–∑–≤–∏—Ç–∏–µ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–π –∫—É–ª—å—Ç—É—Ä—ã.",
         "—Ä–µ–∫—Ä—É—Ç–∏–Ω–≥,–ø—Å–∏—Ö–æ–ª–æ–≥–∏—è,–∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏,–æ—Ü–µ–Ω–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞", "–í–£–ó/–ö—É—Ä—Å—ã", "60000-150000",
         "–ø–µ—Ä—Å–æ–Ω–∞–ª,—Ä–µ–∫—Ä—É—Ç–∏–Ω–≥,–ø—Å–∏—Ö–æ–ª–æ–≥–∏—è,—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", "https://www.linkedin.com/,https://hh.ru/"),
        
        ("–ë–∏–∑–Ω–µ—Å-–∞–Ω–∞–ª–∏—Ç–∏–∫", "–ë–∏–∑–Ω–µ—Å –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ",
         "–ê–Ω–∞–ª–∏–∑ –±–∏–∑–Ω–µ—Å-–ø—Ä–æ—Ü–µ—Å—Å–æ–≤, –≤—ã—è–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Ä–µ—à–µ–Ω–∏–π –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏.",
         "–∞–Ω–∞–ª–∏—Ç–∏–∫–∞,Excel,SQL,–ø—Ä–æ—Ü–µ—Å—Å—ã,–¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è", "–í–£–ó", "80000-200000",
         "–∞–Ω–∞–ª–∏—Ç–∏–∫–∞,–±–∏–∑–Ω–µ—Å,–ø—Ä–æ—Ü–µ—Å—Å—ã,–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è", "https://www.microsoft.com/excel/,https://www.tableau.com/"),
        
        ("–ü—Ä–æ–¥–∞–∫—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä", "–ë–∏–∑–Ω–µ—Å –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ",
         "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–æ–º, –∞–Ω–∞–ª–∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π.",
         "–∞–Ω–∞–ª–∏—Ç–∏–∫–∞,–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏,—Å—Ç—Ä–∞—Ç–µ–≥–∏—è,–∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏", "–í–£–ó/–û–ø—ã—Ç", "100000-250000",
         "–ø—Ä–æ–¥—É–∫—Ç,–∞–Ω–∞–ª–∏—Ç–∏–∫–∞,—Å—Ç—Ä–∞—Ç–µ–≥–∏—è,—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", "https://www.productplan.com/,https://amplitude.com/"),
        
        ("–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å", "–ù–∞—É–∫–∞ –∏ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ",
         "–û–±—É—á–µ–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤, —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ —É—á–µ–±–Ω—ã—Ö –ø—Ä–æ–≥—Ä–∞–º–º –∏ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–µ –Ω–∞—É—á–Ω—ã—Ö –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π.",
         "–ø–µ–¥–∞–≥–æ–≥–∏–∫–∞,–ø—Ä–µ–¥–º–µ—Ç–Ω—ã–µ –∑–Ω–∞–Ω–∏—è,–∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è,–∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏", "–í–£–ó", "40000-120000",
         "–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ,–ø—Ä–µ–ø–æ–¥–∞–≤–∞–Ω–∏–µ,–Ω–∞—É–∫–∞,—Ä–∞–∑–≤–∏—Ç–∏–µ", "https://www.edx.org/,https://coursera.org/"),
        
        ("–ù–∞—É—á–Ω—ã–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫", "–ù–∞—É–∫–∞ –∏ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ",
         "–ü—Ä–æ–≤–µ–¥–µ–Ω–∏–µ –Ω–∞—É—á–Ω—ã—Ö –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π, –ø—É–±–ª–∏–∫–∞—Ü–∏—è —Å—Ç–∞—Ç–µ–π –∏ —É—á–∞—Å—Ç–∏–µ –≤ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è—Ö.",
         "–∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è,–∞–Ω–∞–ª–∏–∑,–ø—É–±–ª–∏–∫–∞—Ü–∏–∏,—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "–í–£–ó/–ê—Å–ø–∏—Ä–∞–Ω—Ç—É—Ä–∞", "50000-150000",
         "–Ω–∞—É–∫–∞,–∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è,–∞–Ω–∞–ª–∏–∑,–ø—É–±–ª–∏–∫–∞—Ü–∏–∏", "https://www.nature.com/,https://scholar.google.com/"),
        
        ("–ü–µ—Ä–µ–≤–æ–¥—á–∏–∫", "–ù–∞—É–∫–∞ –∏ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ",
         "–ü–µ—Ä–µ–≤–æ–¥ —Ç–µ–∫—Å—Ç–æ–≤, –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏ —É—Å—Ç–Ω–∞—è –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è –º–µ–∂–¥—É —Ä–∞–∑–Ω—ã–º–∏ —è–∑—ã–∫–∞–º–∏.",
         "–∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–µ —è–∑—ã–∫–∏,–ª–∏–Ω–≥–≤–∏—Å—Ç–∏–∫–∞,–∫—É–ª—å—Ç—É—Ä–∞,–∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏", "–í–£–ó/–ö—É—Ä—Å—ã", "50000-150000",
         "—è–∑—ã–∫–∏,–ø–µ—Ä–µ–≤–æ–¥,–ª–∏–Ω–≥–≤–∏—Å—Ç–∏–∫–∞,–∫—É–ª—å—Ç—É—Ä–∞", "https://www.deepl.com/,https://translate.google.com/"),
        
        ("–í—Ä–∞—á", "–ú–µ–¥–∏—Ü–∏–Ω–∞ –∏ –∑–¥–æ—Ä–æ–≤—å–µ",
         "–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∏ –ª–µ—á–µ–Ω–∏–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–π, –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤ –∏ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã.",
         "–º–µ–¥–∏—Ü–∏–Ω–∞,–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞,–ª–µ—á–µ–Ω–∏–µ,–∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏", "–í–£–ó/–û—Ä–¥–∏–Ω–∞—Ç—É—Ä–∞", "80000-300000",
         "–º–µ–¥–∏—Ü–∏–Ω–∞,–∑–¥–æ—Ä–æ–≤—å–µ,–ª–µ—á–µ–Ω–∏–µ,–ø–æ–º–æ—â—å –ª—é–¥—è–º", "https://www.who.int/,https://www.cdc.gov/"),
        
        ("–ü—Å–∏—Ö–æ–ª–æ–≥", "–ú–µ–¥–∏—Ü–∏–Ω–∞ –∏ –∑–¥–æ—Ä–æ–≤—å–µ",
         "–ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –ø–æ–º–æ—â—å, –∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–µ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö —Ç–µ—Å—Ç–æ–≤.",
         "–ø—Å–∏—Ö–æ–ª–æ–≥–∏—è,–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ,—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ,—ç–º–ø–∞—Ç–∏—è", "–í–£–ó", "60000-150000",
         "–ø—Å–∏—Ö–æ–ª–æ–≥–∏—è,–ø–æ–º–æ—â—å,–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ,–∑–¥–æ—Ä–æ–≤—å–µ", "https://www.apa.org/,https://www.psychology.org/"),
        
        ("–§–∏—Ç–Ω–µ—Å-—Ç—Ä–µ–Ω–µ—Ä", "–ú–µ–¥–∏—Ü–∏–Ω–∞ –∏ –∑–¥–æ—Ä–æ–≤—å–µ",
         "–ü—Ä–æ–≤–µ–¥–µ–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫, —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º –ø–∏—Ç–∞–Ω–∏—è –∏ –º–æ—Ç–∏–≤–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤.",
         "—Ñ–∏—Ç–Ω–µ—Å,–∞–Ω–∞—Ç–æ–º–∏—è,–ø–∏—Ç–∞–Ω–∏–µ,–º–æ—Ç–∏–≤–∞—Ü–∏—è,–∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏", "–ö—É—Ä—Å—ã/–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã", "40000-120000",
         "—Ñ–∏—Ç–Ω–µ—Å,–∑–¥–æ—Ä–æ–≤—å–µ,—Å–ø–æ—Ä—Ç,–º–æ—Ç–∏–≤–∞—Ü–∏—è", "https://www.acefitness.org/,https://www.nasm.org/"),
        
        ("–ú–µ–¥—Å–µ—Å—Ç—Ä–∞", "–ú–µ–¥–∏—Ü–∏–Ω–∞ –∏ –∑–¥–æ—Ä–æ–≤—å–µ",
         "–£—Ö–æ–¥ –∑–∞ –ø–∞—Ü–∏–µ–Ω—Ç–∞–º–∏, –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö –ø—Ä–æ—Ü–µ–¥—É—Ä –∏ –ø–æ–º–æ—â—å –≤—Ä–∞—á–∞–º.",
         "–º–µ–¥–∏—Ü–∏–Ω–∞,—É—Ö–æ–¥,–ø—Ä–æ—Ü–µ–¥—É—Ä—ã,–∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏,—ç–º–ø–∞—Ç–∏—è", "–ö–æ–ª–ª–µ–¥–∂/–í–£–ó", "40000-100000",
         "–º–µ–¥–∏—Ü–∏–Ω–∞,—É—Ö–æ–¥,–ø–æ–º–æ—â—å,–∑–¥–æ—Ä–æ–≤—å–µ", "https://www.nursingworld.org/,https://www.icn.ch/"),
        
        ("–≠–ª–µ–∫—Ç—Ä–∏–∫", "–†–∞–±–æ—á–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏",
         "–ú–æ–Ω—Ç–∞–∂ –∏ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏—Ö —Å–∏—Å—Ç–µ–º, —Ä–µ–º–æ–Ω—Ç —ç–ª–µ–∫—Ç—Ä–æ–æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è.",
         "—ç–ª–µ–∫—Ç—Ä–∏–∫–∞,–º–æ–Ω—Ç–∞–∂,—Ä–µ–º–æ–Ω—Ç,–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å,–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã", "–ö–æ–ª–ª–µ–¥–∂/–ö—É—Ä—Å—ã", "50000-120000",
         "—ç–ª–µ–∫—Ç—Ä–∏–∫–∞,—Ä–µ–º–æ–Ω—Ç,–º–æ–Ω—Ç–∞–∂,—Ç–µ—Ö–Ω–∏–∫–∞", "https://www.electricalsafetyfirst.org.uk/,https://www.nfpa.org/"),
        
        ("–°–∞–Ω—Ç–µ—Ö–Ω–∏–∫", "–†–∞–±–æ—á–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏",
         "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ —Ä–µ–º–æ–Ω—Ç —Å–∞–Ω—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è, –≤–æ–¥–æ–ø—Ä–æ–≤–æ–¥–Ω—ã—Ö –∏ –∫–∞–Ω–∞–ª–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º.",
         "—Å–∞–Ω—Ç–µ—Ö–Ω–∏–∫–∞,–º–æ–Ω—Ç–∞–∂,—Ä–µ–º–æ–Ω—Ç,–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã,–º–∞—Ç–µ—Ä–∏–∞–ª—ã", "–ö—É—Ä—Å—ã/–û–ø—ã—Ç", "45000-110000",
         "—Å–∞–Ω—Ç–µ—Ö–Ω–∏–∫–∞,—Ä–µ–º–æ–Ω—Ç,–º–æ–Ω—Ç–∞–∂,—Ç–µ—Ö–Ω–∏–∫–∞", "https://www.phccweb.org/,https://www.iapmo.org/"),
        
        ("–ê–≤—Ç–æ–º–µ—Ö–∞–Ω–∏–∫", "–†–∞–±–æ—á–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏",
         "–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∏ —Ä–µ–º–æ–Ω—Ç –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π, –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –¥–≤–∏–≥–∞—Ç–µ–ª–µ–π –∏ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º.",
         "–∞–≤—Ç–æ–º–æ–±–∏–ª–∏,–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞,—Ä–µ–º–æ–Ω—Ç,–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã,—ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞", "–ö–æ–ª–ª–µ–¥–∂/–ö—É—Ä—Å—ã", "50000-130000",
         "–∞–≤—Ç–æ–º–æ–±–∏–ª–∏,—Ä–µ–º–æ–Ω—Ç,–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞,—Ç–µ—Ö–Ω–∏–∫–∞", "https://www.ase.com/,https://www.sae.org/"),
        
        ("–°—Ç—Ä–æ–∏—Ç–µ–ª—å", "–†–∞–±–æ—á–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏",
         "–°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ –∑–¥–∞–Ω–∏–π, —Ä–∞–±–æ—Ç–∞ —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏ –∏ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–º–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏.",
         "—Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ,–º–∞—Ç–µ—Ä–∏–∞–ª—ã,–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã,—á–µ—Ä—Ç–µ–∂–∏,–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å", "–ö—É—Ä—Å—ã/–û–ø—ã—Ç", "40000-100000",
         "—Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ,—Ä–µ–º–æ–Ω—Ç,–º–æ–Ω—Ç–∞–∂,—Ç–µ—Ö–Ω–∏–∫–∞", "https://www.osha.gov/,https://www.construction.com/"),
        
        ("–ü–æ–≤–∞—Ä", "–°—Ñ–µ—Ä–∞ —É—Å–ª—É–≥",
         "–ü—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ –±–ª—é–¥, —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –º–µ–Ω—é –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—É—Ö–Ω–µ–π –≤ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞—Ö.",
         "–∫—É–ª–∏–Ω–∞—Ä–∏—è,–º–µ–Ω—é,—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ,—Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ,–≥–∏–≥–∏–µ–Ω–∞", "–ö–æ–ª–ª–µ–¥–∂/–ö—É—Ä—Å—ã", "40000-100000",
         "–∫—É–ª–∏–Ω–∞—Ä–∏—è,—Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ,—Å–µ—Ä–≤–∏—Å,–µ–¥–∞", "https://www.culinaryinstitute.edu/,https://www.chefsteps.com/"),
        
        ("–ü–∞—Ä–∏–∫–º–∞—Ö–µ—Ä", "–°—Ñ–µ—Ä–∞ —É—Å–ª—É–≥",
         "–°—Ç—Ä–∏–∂–∫–∞, –æ–∫—Ä–∞—à–∏–≤–∞–Ω–∏–µ –∏ —É–∫–ª–∞–¥–∫–∞ –≤–æ–ª–æ—Å, –∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ —É—Ö–æ–¥—É.",
         "–ø–∞—Ä–∏–∫–º–∞—Ö–µ—Ä—Å–∫–æ–µ –¥–µ–ª–æ,—Å—Ç–∏–ª–∏—Å—Ç–∏–∫–∞,—Ö–∏–º–∏—è,–∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏", "–ö—É—Ä—Å—ã/–õ–∏—Ü–µ–Ω–∑–∏—è", "35000-90000",
         "–∫—Ä–∞—Å–æ—Ç–∞,—Å—Ç–∏–ª—å,—Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ,—Å–µ—Ä–≤–∏—Å", "https://www.beauty-schools.com/,https://www.loreal.com/"),
        
        ("–¢—É—Ä–∞–≥–µ–Ω—Ç", "–°—Ñ–µ—Ä–∞ —É—Å–ª—É–≥",
         "–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è —Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö –ø–æ–µ–∑–¥–æ–∫, –∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ª—É–≥.",
         "—Ç—É—Ä–∏–∑–º,–≥–µ–æ–≥—Ä–∞—Ñ–∏—è,—è–∑—ã–∫–∏,–∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏,–ø—Ä–æ–¥–∞–∂–∏", "–ö—É—Ä—Å—ã/–û–ø—ã—Ç", "30000-80000",
         "—Ç—É—Ä–∏–∑–º,–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è,—Å–µ—Ä–≤–∏—Å,–≥–µ–æ–≥—Ä–∞—Ñ–∏—è", "https://www.travelagentcentral.com/,https://www.booking.com/"),
        
        ("–ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º", "–°—Ñ–µ—Ä–∞ —É—Å–ª—É–≥",
         "–ö–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–æ–≤, –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –∏ —É—Å–ª—É–≥, —Ä–∞–±–æ—Ç–∞ —Å –≤–æ–∑—Ä–∞–∂–µ–Ω–∏—è–º–∏.",
         "–ø—Ä–æ–¥–∞–∂–∏,–∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏,–ø—Å–∏—Ö–æ–ª–æ–≥–∏—è,–ø—Ä–æ–¥—É–∫—Ç—ã,–ø–µ—Ä–µ–≥–æ–≤–æ—Ä—ã", "–û–ø—ã—Ç/–ö—É—Ä—Å—ã", "40000-120000",
         "–ø—Ä–æ–¥–∞–∂–∏,–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ,–∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏,—Å–µ—Ä–≤–∏—Å", "https://www.salesforce.com/,https://www.hubspot.com/"),
        
        ("–õ–æ–≥–∏—Å—Ç", "–°—Ñ–µ—Ä–∞ —É—Å–ª—É–≥",
         "–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–≤–æ–∑–æ–∫, —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∫–ª–∞–¥—Å–∫–∏–º–∏ –∑–∞–ø–∞—Å–∞–º–∏ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ü–µ–ø–æ—á–µ–∫ –ø–æ—Å—Ç–∞–≤–æ–∫.",
         "–ª–æ–≥–∏—Å—Ç–∏–∫–∞,—Å–∫–ª–∞–¥,—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç,–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ,–∞–Ω–∞–ª–∏—Ç–∏–∫–∞", "–í–£–ó/–ö—É—Ä—Å—ã", "50000-130000",
         "–ª–æ–≥–∏—Å—Ç–∏–∫–∞,—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç,—Å–∫–ª–∞–¥,–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ", "https://www.cscmp.org/,https://www.supplychain247.com/"),
        
        ("–ú–æ–±–∏–ª—å–Ω—ã–π —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫", "IT –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏",
         "–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –¥–ª—è iOS –∏ Android –ø–ª–∞—Ç—Ñ–æ—Ä–º.",
         "Swift,Kotlin,React Native,Flutter,–º–æ–±–∏–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞", "–í–£–ó/–ö—É—Ä—Å—ã", "90000-220000",
         "–º–æ–±–∏–ª—å–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è,–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ,ios,android", "https://developer.apple.com/,https://developer.android.com/"),
        
        ("–ö–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å", "IT –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏",
         "–ó–∞—â–∏—Ç–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º –æ—Ç –∫–∏–±–µ—Ä–∞—Ç–∞–∫ –∏ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö.",
         "–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å,—Å–µ—Ç–∏,–∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—è,–∞–Ω–∞–ª–∏–∑ —É–≥—Ä–æ–∑,–º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥", "–í–£–ó/–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã", "100000-250000",
         "–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å,—Ö–∞–∫–µ—Ä—Å—Ç–≤–æ,–∑–∞—â–∏—Ç–∞,–∞–Ω–∞–ª–∏–∑", "https://www.cisecurity.org/,https://www.sans.org/"),
        
        ("Game Developer", "IT –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏",
         "–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã—Ö –∏–≥—Ä, —Å–æ–∑–¥–∞–Ω–∏–µ –∏–≥—Ä–æ–≤—ã—Ö –º–µ—Ö–∞–Ω–∏–∫ –∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–≥—Ä–æ–≤–æ–≥–æ –¥–≤–∏–∂–∫–∞.",
         "Unity,Unreal Engine,C#,C++,–∏–≥—Ä–æ–≤–æ–π –¥–∏–∑–∞–π–Ω,3D –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ", "–í–£–ó/–ö—É—Ä—Å—ã", "80000-200000",
         "–∏–≥—Ä—ã,–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ,—Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ,3D", "https://unity.com/,https://www.unrealengine.com/"),
        
        ("Blockchain —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫", "IT –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏",
         "–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –¥–µ—Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –∏ —Å–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –Ω–∞ –±–ª–æ–∫—á–µ–π–Ω –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Ö.",
         "Solidity,Web3,JavaScript,–∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—è,—Å–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã", "–í–£–ó/–ö—É—Ä—Å—ã", "120000-300000",
         "–±–ª–æ–∫—á–µ–π–Ω,–∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã,–¥–µ—Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–∞—Ü–∏—è,–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ", "https://ethereum.org/,https://docs.soliditylang.org/"),
        
        ("–§–æ—Ç–æ–≥—Ä–∞—Ñ", "–¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ –∏ –¥–∏–∑–∞–π–Ω",
         "–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ü–µ–ª–µ–π: –ø–æ—Ä—Ç—Ä–µ—Ç—ã, —Å–≤–∞–¥—å–±—ã, –∫–æ–º–º–µ—Ä—á–µ—Å–∫–∞—è —Å—ä–µ–º–∫–∞.",
         "—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è,–∫–æ–º–ø–æ–∑–∏—Ü–∏—è,—Å–≤–µ—Ç,–ø–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–∞,Photoshop", "–ö—É—Ä—Å—ã/–ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ", "40000-150000",
         "—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è,—Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ,–∏—Å–∫—É—Å—Å—Ç–≤–æ,–≤–∏–∑—É–∞–ª", "https://www.adobe.com/,https://www.photography.com/"),
        
        ("–ò–ª–ª—é—Å—Ç—Ä–∞—Ç–æ—Ä", "–¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ –∏ –¥–∏–∑–∞–π–Ω",
         "–°–æ–∑–¥–∞–Ω–∏–µ –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏–π –¥–ª—è –∫–Ω–∏–≥, –∂—É—Ä–Ω–∞–ª–æ–≤, —Ä–µ–∫–ª–∞–º—ã –∏ —Ü–∏—Ñ—Ä–æ–≤—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤.",
         "—Ä–∏—Å–æ–≤–∞–Ω–∏–µ,Photoshop,Illustrator,—Å—Ç–∏–ª–∏,–∫–æ–º–ø–æ–∑–∏—Ü–∏—è", "–ö—É—Ä—Å—ã/–ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ", "50000-140000",
         "–∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏—è,—Ä–∏—Å–æ–≤–∞–Ω–∏–µ,—Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ,–∏—Å–∫—É—Å—Å—Ç–≤–æ", "https://www.adobe.com/,https://www.behance.net/"),
        
        ("–ê—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä", "–¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ –∏ –¥–∏–∑–∞–π–Ω",
         "–ü—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–¥–∞–Ω–∏–π –∏ —Å–æ–æ—Ä—É–∂–µ–Ω–∏–π, —Å–æ–∑–¥–∞–Ω–∏–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã—Ö —á–µ—Ä—Ç–µ–∂–µ–π –∏ 3D –º–æ–¥–µ–ª–µ–π.",
         "AutoCAD,SketchUp,3D –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ,—Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ,–¥–∏–∑–∞–π–Ω", "–í–£–ó", "80000-200000",
         "–∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞,–¥–∏–∑–∞–π–Ω,—Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ,—Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ", "https://www.autodesk.com/,https://www.sketchup.com/"),
        
        ("–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –∞–Ω–∞–ª–∏—Ç–∏–∫", "–ë–∏–∑–Ω–µ—Å –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ",
         "–ê–Ω–∞–ª–∏–∑ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –æ—Ü–µ–Ω–∫–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –æ—Ç—á–µ—Ç–æ–≤.",
         "—Ñ–∏–Ω–∞–Ω—Å—ã,Excel,–∞–Ω–∞–ª–∏—Ç–∏–∫–∞,–º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ,—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "–í–£–ó", "80000-200000",
         "—Ñ–∏–Ω–∞–Ω—Å—ã,–∞–Ω–∞–ª–∏—Ç–∏–∫–∞,–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏,–æ—Ç—á–µ—Ç—ã", "https://www.cfainstitute.org/,https://www.bloomberg.com/"),
        
        ("–ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç", "–ë–∏–∑–Ω–µ—Å –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ",
         "–ö–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–π –ø–æ —Ä–∞–∑–ª–∏—á–Ω—ã–º –≤–æ–ø—Ä–æ—Å–∞–º: —Å—Ç—Ä–∞—Ç–µ–≥–∏—è, –æ–ø–µ—Ä–∞—Ü–∏–∏, —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏.",
         "–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ,–∞–Ω–∞–ª–∏—Ç–∏–∫–∞,—Å—Ç—Ä–∞—Ç–µ–≥–∏—è,–∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏", "–í–£–ó/–û–ø—ã—Ç", "100000-300000",
         "–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ,—Å—Ç—Ä–∞—Ç–µ–≥–∏—è,–∞–Ω–∞–ª–∏—Ç–∏–∫–∞,–±–∏–∑–Ω–µ—Å", "https://www.mckinsey.com/,https://www.bcg.com/"),
        
        ("Event-–º–µ–Ω–µ–¥–∂–µ—Ä", "–ë–∏–∑–Ω–µ—Å –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ",
         "–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π: –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤—ã, –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏, —Å–≤–∞–¥—å–±—ã –∏ –¥—Ä—É–≥–∏–µ —Å–æ–±—ã—Ç–∏—è.",
         "–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ,–∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è,—Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ,–∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏,–±—é–¥–∂–µ—Ç", "–ö—É—Ä—Å—ã/–û–ø—ã—Ç", "50000-130000",
         "–º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è,–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ,—Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ,–∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è", "https://www.eventbrite.com/,https://www.cvent.com/"),
        
        ("–°—Ç–∏–ª–∏—Å—Ç", "–°—Ñ–µ—Ä–∞ —É—Å–ª—É–≥",
         "–°–æ–∑–¥–∞–Ω–∏–µ –æ–±—Ä–∞–∑–æ–≤, –ø–æ–¥–±–æ—Ä –æ–¥–µ–∂–¥—ã –∏ –∞–∫—Å–µ—Å—Å—É–∞—Ä–æ–≤, –∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ —Å—Ç–∏–ª—é.",
         "—Å—Ç–∏–ª–∏—Å—Ç–∏–∫–∞,–º–æ–¥–∞,—Ü–≤–µ—Ç,–∫–æ–º–ø–æ–∑–∏—Ü–∏—è,–∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏", "–ö—É—Ä—Å—ã/–û–ø—ã—Ç", "40000-120000",
         "—Å—Ç–∏–ª—å,–º–æ–¥–∞,–∫—Ä–∞—Å–æ—Ç–∞,—Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ", "https://www.vogue.com/,https://www.style.com/"),
        
        ("–ö–æ—É—á", "–°—Ñ–µ—Ä–∞ —É—Å–ª—É–≥",
         "–ü–æ–º–æ—â—å –ª—é–¥—è–º –≤ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ —Ü–µ–ª–µ–π, —Ä–∞–∑–≤–∏—Ç–∏–µ –Ω–∞–≤—ã–∫–æ–≤ –∏ –ª–∏—á–Ω–æ—Å—Ç–Ω—ã–π —Ä–æ—Å—Ç.",
         "–∫–æ—É—á–∏–Ω–≥,–ø—Å–∏—Ö–æ–ª–æ–≥–∏—è,–º–æ—Ç–∏–≤–∞—Ü–∏—è,–∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏,—Ä–∞–∑–≤–∏—Ç–∏–µ", "–ö—É—Ä—Å—ã/–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã", "60000-150000",
         "–∫–æ—É—á–∏–Ω–≥,—Ä–∞–∑–≤–∏—Ç–∏–µ,–º–æ—Ç–∏–≤–∞—Ü–∏—è,–ø—Å–∏—Ö–æ–ª–æ–≥–∏—è", "https://www.icf.org/,https://www.coachfederation.org/"),
        
        ("–ù—è–Ω—è", "–°—Ñ–µ—Ä–∞ —É—Å–ª—É–≥",
         "–£—Ö–æ–¥ –∑–∞ –¥–µ—Ç—å–º–∏, –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –¥–æ—Å—É–≥–∞ –∏ –ø–æ–º–æ—â—å –≤ —Ä–∞–∑–≤–∏—Ç–∏–∏ —Ä–µ–±–µ–Ω–∫–∞.",
         "–ø–µ–¥–∞–≥–æ–≥–∏–∫–∞,–ø—Å–∏—Ö–æ–ª–æ–≥–∏—è,—Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ,–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å,—Ç–µ—Ä–ø–µ–Ω–∏–µ", "–ö—É—Ä—Å—ã/–û–ø—ã—Ç", "30000-80000",
         "–¥–µ—Ç–∏,—É—Ö–æ–¥,–≤–æ—Å–ø–∏—Ç–∞–Ω–∏–µ,—Ä–∞–∑–≤–∏—Ç–∏–µ", "https://www.care.com/,https://www.sittercity.com/"),
        
        ("–ò–Ω–∂–µ–Ω–µ—Ä-–∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä", "–†–∞–±–æ—á–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏",
         "–ü—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–∑–¥–µ–ª–∏–π, —Å–æ–∑–¥–∞–Ω–∏–µ —á–µ—Ä—Ç–µ–∂–µ–π –∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏.",
         "CAD,–∏–Ω–∂–µ–Ω–µ—Ä–∏—è,—á–µ—Ä—Ç–µ–∂–∏,–º–∞—Ç–µ—Ä–∏–∞–ª—ã,—Ä–∞—Å—á–µ—Ç—ã", "–í–£–ó", "70000-180000",
         "–∏–Ω–∂–µ–Ω–µ—Ä–∏—è,–ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ,—Ç–µ—Ö–Ω–∏–∫–∞,—á–µ—Ä—Ç–µ–∂–∏", "https://www.autodesk.com/,https://www.solidworks.com/"),
        
        ("–¢–µ—Ö–Ω–æ–ª–æ–≥", "–†–∞–±–æ—á–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏",
         "–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ –∏ –∫–æ–Ω—Ç—Ä–æ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–¥—É–∫—Ü–∏–∏.",
         "—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏,–ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ,–∫–∞—á–µ—Å—Ç–≤–æ,–∞–Ω–∞–ª–∏–∑,–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è", "–í–£–ó", "60000-150000",
         "—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏,–ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ,–∫–∞—á–µ—Å—Ç–≤–æ,–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è", "https://www.astm.org/,https://www.iso.org/"),
        
        ("–°–≤–∞—Ä—â–∏–∫", "–†–∞–±–æ—á–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏",
         "–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –º–µ—Ç–∞–ª–ª–∏—á–µ—Å–∫–∏—Ö –¥–µ—Ç–∞–ª–µ–π —Å –ø–æ–º–æ—â—å—é —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –≤–∏–¥–æ–≤ —Å–≤–∞—Ä–∫–∏.",
         "—Å–≤–∞—Ä–∫–∞,–º–µ—Ç–∞–ª–ª—ã,–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã,–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å,—á–µ—Ä—Ç–µ–∂–∏", "–ö—É—Ä—Å—ã/–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã", "50000-120000",
         "—Å–≤–∞—Ä–∫–∞,–º–µ—Ç–∞–ª–ª—ã,–ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ,—Ç–µ—Ö–Ω–∏–∫–∞", "https://www.aws.org/,https://www.lincolnelectric.com/"),
        
        ("–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞—Ä—å", "–ù–∞—É–∫–∞ –∏ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ",
         "–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –±–∏–±–ª–∏–æ—Ç–µ—á–Ω—ã—Ö —Ñ–æ–Ω–¥–æ–≤, –ø–æ–º–æ—â—å —á–∏—Ç–∞—Ç–µ–ª—è–º –∏ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–µ –∫—É–ª—å—Ç—É—Ä–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π.",
         "–∫–∞—Ç–∞–ª–æ–≥–∏–∑–∞—Ü–∏—è,–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏,–∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏,–∫—É–ª—å—Ç—É—Ä–∞", "–í–£–ó/–ö—É—Ä—Å—ã", "30000-70000",
         "–∫–Ω–∏–≥–∏,–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è,–∫—É–ª—å—Ç—É—Ä–∞,–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ", "https://www.ala.org/,https://www.ifla.org/"),
        
        ("–õ–∞–±–æ—Ä–∞–Ω—Ç", "–ù–∞—É–∫–∞ –∏ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ",
         "–ü—Ä–æ–≤–µ–¥–µ–Ω–∏–µ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã—Ö –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π, –∞–Ω–∞–ª–∏–∑ –æ–±—Ä–∞–∑—Ü–æ–≤ –∏ –≤–µ–¥–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏.",
         "–ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ,—Ö–∏–º–∏—è,–±–∏–æ–ª–æ–≥–∏—è,–∞–Ω–∞–ª–∏–∑,–¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è", "–ö–æ–ª–ª–µ–¥–∂/–í–£–ó", "40000-90000",
         "–ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è,–∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è,–∞–Ω–∞–ª–∏–∑,–Ω–∞—É–∫–∞", "https://www.labmanager.com/,https://www.sigmaaldrich.com/"),
        
        ("–≠–∫–æ–ª–æ–≥", "–ù–∞—É–∫–∞ –∏ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ",
         "–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –æ–∫—Ä—É–∂–∞—é—â–µ–π —Å—Ä–µ–¥—ã, –æ—Ü–µ–Ω–∫–∞ —ç–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö —Ä–∏—Å–∫–æ–≤ –∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏—Ä–æ–¥–æ–æ—Ö—Ä–∞–Ω–Ω—ã—Ö –º–µ—Ä.",
         "—ç–∫–æ–ª–æ–≥–∏—è,–±–∏–æ–ª–æ–≥–∏—è,—Ö–∏–º–∏—è,–∞–Ω–∞–ª–∏–∑,–º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥", "–í–£–ó", "50000-120000",
         "—ç–∫–æ–ª–æ–≥–∏—è,–ø—Ä–∏—Ä–æ–¥–∞,–∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è,–æ—Ö—Ä–∞–Ω–∞", "https://www.epa.gov/,https://www.unep.org/"),
        
        ("–§–∞—Ä–º–∞—Ü–µ–≤—Ç", "–ú–µ–¥–∏—Ü–∏–Ω–∞ –∏ –∑–¥–æ—Ä–æ–≤—å–µ",
         "–ò–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ –∏ –æ—Ç–ø—É—Å–∫ –ª–µ–∫–∞—Ä—Å—Ç–≤, –∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—é –º–µ–¥–∏–∫–∞–º–µ–Ω—Ç–æ–≤.",
         "—Ñ–∞—Ä–º–∞–∫–æ–ª–æ–≥–∏—è,—Ö–∏–º–∏—è,–º–µ–¥–∏—Ü–∏–Ω–∞,–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", "–í–£–ó", "60000-140000",
         "—Ñ–∞—Ä–º–∞–∫–æ–ª–æ–≥–∏—è,–ª–µ–∫–∞—Ä—Å—Ç–≤–∞,–∑–¥–æ—Ä–æ–≤—å–µ,–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", "https://www.fda.gov/,https://www.who.int/"),
        
        ("–ú–∞—Å—Å–∞–∂–∏—Å—Ç", "–ú–µ–¥–∏—Ü–∏–Ω–∞ –∏ –∑–¥–æ—Ä–æ–≤—å–µ",
         "–ü—Ä–æ–≤–µ–¥–µ–Ω–∏–µ –ª–µ—á–µ–±–Ω–æ–≥–æ –∏ —Ä–∞—Å—Å–ª–∞–±–ª—è—é—â–µ–≥–æ –º–∞—Å—Å–∞–∂–∞, –ø–æ–º–æ—â—å –≤ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–¥–æ—Ä–æ–≤—å—è.",
         "–∞–Ω–∞—Ç–æ–º–∏—è,–º–∞—Å—Å–∞–∂,—Ñ–∏–∑–∏–æ–ª–æ–≥–∏—è,–∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏,—ç–º–ø–∞—Ç–∏—è", "–ö—É—Ä—Å—ã/–õ–∏—Ü–µ–Ω–∑–∏—è", "40000-100000",
         "–º–∞—Å—Å–∞–∂,–∑–¥–æ—Ä–æ–≤—å–µ,—Ä–µ–ª–∞–∫—Å–∞—Ü–∏—è,–º–µ–¥–∏—Ü–∏–Ω–∞", "https://www.amtamassage.org/,https://www.ncbtmb.org/"),
        
        ("–î–∏–µ—Ç–æ–ª–æ–≥", "–ú–µ–¥–∏—Ü–∏–Ω–∞ –∏ –∑–¥–æ—Ä–æ–≤—å–µ",
         "–ö–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É –ø–∏—Ç–∞–Ω–∏—é, —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–∏–µ—Ç –∏ –ø–ª–∞–Ω–æ–≤ –ø–∏—Ç–∞–Ω–∏—è.",
         "–¥–∏–µ—Ç–æ–ª–æ–≥–∏—è,–ø–∏—Ç–∞–Ω–∏–µ,–±–∏–æ—Ö–∏–º–∏—è,–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ,–∞–Ω–∞–ª–∏–∑", "–í–£–ó", "50000-120000",
         "–ø–∏—Ç–∞–Ω–∏–µ,–¥–∏–µ—Ç–æ–ª–æ–≥–∏—è,–∑–¥–æ—Ä–æ–≤—å–µ,–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", "https://www.eatright.org/,https://www.nutrition.org/")
    ]
    
    for career in careers_data:
        c.execute("""
        INSERT INTO careers(name, category, description, skills_required, education_level, 
                          salary_range, tags, learning_resources, created_at)
        VALUES(?,?,?,?,?,?,?,?,?)
        """, (*career, datetime.utcnow().isoformat()))
    
    conn.commit()
    conn.close()
    print(f"Added {len(careers_data)} careers to database")

def seed_test_questions():
    """–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏"""
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    
    c.execute("SELECT COUNT(*) FROM test_questions")
    if c.fetchone()[0] > 0:
        conn.close()
        return
    
    questions_data = [
        ("–ß—Ç–æ —Ç–µ–±—è –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –ø—Ä–∏–≤–ª–µ–∫–∞–µ—Ç –≤ —Ä–∞–±–æ—Ç–µ?", 
         "–°–æ–∑–¥–∞–Ω–∏–µ —á–µ–≥–æ-—Ç–æ –Ω–æ–≤–æ–≥–æ,–†–µ—à–µ–Ω–∏–µ —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–¥–∞—á,–ü–æ–º–æ—â—å –ª—é–¥—è–º,–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö,–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏,–†–∞–±–æ—Ç–∞ —Å —Ç–µ—Ö–Ω–∏–∫–æ–π",
         "CREATIVE:3,IT:2,BUSINESS:1,SCIENCE:2,MEDICAL:3,TECHNICAL:1",
         "general", 1),
        
        ("–ö–∞–∫–æ–π —Ç–∏–ø –∑–∞–¥–∞—á —Ç–µ–±–µ –Ω—Ä–∞–≤–∏—Ç—Å—è –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ?",
         "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞,–î–∏–∑–∞–π–Ω –∏ —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ,–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è,–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –∏ –∞–Ω–∞–ª–∏–∑,–õ–µ—á–µ–Ω–∏–µ –∏ –ø–æ–º–æ—â—å,–†–∞–±–æ—Ç–∞ —Ä—É–∫–∞–º–∏",
         "IT:4,CREATIVE:3,BUSINESS:2,SCIENCE:3,MEDICAL:2,TECHNICAL:3",
         "tasks", 2),
        
        ("–í –∫–∞–∫–æ–π —Å—Ä–µ–¥–µ —Ç—ã –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—à—å —Ä–∞–±–æ—Ç–∞—Ç—å?",
         "–ó–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–º –≤ –æ—Ñ–∏—Å–µ,–í —Ç–≤–æ—Ä—á–µ—Å–∫–æ–π —Å—Ç—É–¥–∏–∏,–í –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç–∞—Ö,–í –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏,–í –±–æ–ª—å–Ω–∏—Ü–µ/–∫–ª–∏–Ω–∏–∫–µ,–ù–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ",
         "IT:4,CREATIVE:4,BUSINESS:3,SCIENCE:4,MEDICAL:4,TECHNICAL:3",
         "environment", 3),
        
        ("–ß—Ç–æ –¥–ª—è —Ç–µ–±—è –≤–∞–∂–Ω–µ–µ –≤ –∫–∞—Ä—å–µ—Ä–µ?",
         "–í—ã—Å–æ–∫–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞,–¢–≤–æ—Ä—á–µ—Å–∫–∞—è —Å–∞–º–æ—Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è,–ö–∞—Ä—å–µ—Ä–Ω—ã–π —Ä–æ—Å—Ç,–ù–∞—É—á–Ω—ã–µ –æ—Ç–∫—Ä—ã—Ç–∏—è,–ü–æ–º–æ—â—å –ª—é–¥—è–º,–°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å",
         "IT:2,CREATIVE:4,BUSINESS:3,SCIENCE:3,MEDICAL:4,TECHNICAL:2",
         "values", 4),
        
        ("–ö–∞–∫ —Ç—ã –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—à—å —É—á–∏—Ç—å—Å—è?",
         "–û–Ω–ª–∞–π–Ω –∫—É—Ä—Å—ã –∏ –ø—Ä–∞–∫—Ç–∏–∫–∞,–•—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å—ã,–ë–∏–∑–Ω–µ—Å-—Ç—Ä–µ–Ω–∏–Ω–≥–∏,–ù–∞—É—á–Ω—ã–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è,–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞,–†–∞–±–æ—Ç–∞ —Å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏",
         "IT:4,CREATIVE:3,BUSINESS:2,SCIENCE:3,MEDICAL:3,TECHNICAL:3",
         "learning", 5),
        
        ("–ö–∞–∫–æ–π —É—Ä–æ–≤–µ–Ω—å –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ —Ç–µ–±—è –ø—Ä–∏–≤–ª–µ–∫–∞–µ—Ç?",
         "–í—ã—Å–æ–∫–∏–π - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞–º–∏,–°—Ä–µ–¥–Ω–∏–π - —Ä–∞–±–æ—Ç–∞ –≤ –∫–æ–º–∞–Ω–¥–µ,–í—ã—Å–æ–∫–∏–π - –ø—Ä–∏–Ω—è—Ç–∏–µ —Ä–µ—à–µ–Ω–∏–π,–°—Ä–µ–¥–Ω–∏–π - –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è —Ä–∞–±–æ—Ç–∞,–í—ã—Å–æ–∫–∏–π - –∂–∏–∑–Ω—å –ª—é–¥–µ–π,–°—Ä–µ–¥–Ω–∏–π - –∫–∞—á–µ—Å—Ç–≤–æ —Ä–∞–±–æ—Ç—ã",
         "IT:2,BUSINESS:4,SCIENCE:2,MEDICAL:4,TECHNICAL:2",
         "responsibility", 6),
        
        ("–ß—Ç–æ —Ç–µ–±—è –º–æ—Ç–∏–≤–∏—Ä—É–µ—Ç –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ?",
         "–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –∏–Ω–Ω–æ–≤–∞—Ü–∏–∏,–ö—Ä–∞—Å–æ—Ç–∞ –∏ —ç—Å—Ç–µ—Ç–∏–∫–∞,–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Ü–µ–ª–µ–π,–ù–∞—É—á–Ω—ã–µ –æ—Ç–∫—Ä—ã—Ç–∏—è,–ó–¥–æ—Ä–æ–≤—å–µ –ª—é–¥–µ–π,–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç",
         "IT:4,CREATIVE:4,BUSINESS:3,SCIENCE:4,MEDICAL:4,TECHNICAL:3",
         "motivation", 7),
        
        ("–ö–∞–∫ —Ç—ã –æ—Ç–Ω–æ—Å–∏—à—å—Å—è –∫ —Ä—É—Ç–∏–Ω–Ω–æ–π —Ä–∞–±–æ—Ç–µ?",
         "–¢–µ—Ä–ø–µ—Ç—å –Ω–µ –º–æ–≥—É,–ò–Ω–æ–≥–¥–∞ –Ω–æ—Ä–º–∞–ª—å–Ω–æ,–ü—Ä–∏–Ω–∏–º–∞—é –∫–∞–∫ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å,–ú–æ–≥—É —Ä–∞–±–æ—Ç–∞—Ç—å —Å –¥–∞–Ω–Ω—ã–º–∏,–í–∞–∂–Ω–∞ –¥–ª—è –∑–¥–æ—Ä–æ–≤—å—è,–≠—Ç–æ –æ—Å–Ω–æ–≤–∞ –∫–∞—á–µ—Å—Ç–≤–∞",
         "IT:1,CREATIVE:1,BUSINESS:2,SCIENCE:2,MEDICAL:2,TECHNICAL:3",
         "routine", 8),
        
        ("–ö–∞–∫–æ–π —Ç–∏–ø –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏ —Ç–µ–±–µ –±–ª–∏–∂–µ?",
         "–° –∫–æ–ª–ª–µ–≥–∞–º–∏-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏,–° –∫–ª–∏–µ–Ω—Ç–∞–º–∏ –∏ —Ç–≤–æ—Ä—á–µ—Å–∫–∏–º–∏ –ª—é–¥—å–º–∏,–° –∫–æ–º–∞–Ω–¥–æ–π –∏ –ø–∞—Ä—Ç–Ω–µ—Ä–∞–º–∏,–° –Ω–∞—É—á–Ω—ã–º —Å–æ–æ–±—â–µ—Å—Ç–≤–æ–º,–° –ø–∞—Ü–∏–µ–Ω—Ç–∞–º–∏,–° –∑–∞–∫–∞–∑—á–∏–∫–∞–º–∏",
         "IT:3,CREATIVE:3,BUSINESS:4,SCIENCE:3,MEDICAL:4,TECHNICAL:2",
         "communication", 9),
        
        ("–ß—Ç–æ –¥–ª—è —Ç–µ–±—è –æ–∑–Ω–∞—á–∞–µ—Ç —É—Å–ø–µ—Ö –≤ –∫–∞—Ä—å–µ—Ä–µ?",
         "–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ø—É–ª—è—Ä–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞,–ü—Ä–∏–∑–Ω–∞–Ω–∏–µ –≤ —Ç–≤–æ—Ä—á–µ—Å–∫–æ–π —Å—Ä–µ–¥–µ,–†–æ—Å—Ç –∫–æ–º–ø–∞–Ω–∏–∏,–ù–∞—É—á–Ω—ã–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏,–°–ø–∞—Å–µ–Ω–Ω—ã–µ –∂–∏–∑–Ω–∏,–ù–∞–¥–µ–∂–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã",
         "IT:4,CREATIVE:4,BUSINESS:3,SCIENCE:4,MEDICAL:4,TECHNICAL:3",
         "success", 10),
        
        ("–ö–∞–∫ —Ç—ã –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—à—å —Ä–µ—à–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—ã?",
         "–ß–µ—Ä–µ–∑ –∫–æ–¥ –∏ –∞–ª–≥–æ—Ä–∏—Ç–º—ã,–¢–≤–æ—Ä—á–µ—Å–∫–∏–º –ø–æ–¥—Ö–æ–¥–æ–º,–ß–µ—Ä–µ–∑ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ,–ß–µ—Ä–µ–∑ –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö,–ß–µ—Ä–µ–∑ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É,–ß–µ—Ä–µ–∑ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –º–µ—Ç–æ–¥—ã",
         "IT:4,CREATIVE:3,BUSINESS:2,SCIENCE:3,MEDICAL:3,TECHNICAL:3",
         "problem_solving", 11),

        ("–ö–∞–∫–æ–π –≥—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã —Ç–µ–±–µ –ø–æ–¥—Ö–æ–¥–∏—Ç?",
         "–ì–∏–±–∫–∏–π, —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–µ–Ω–∫–∏,–°–≤–æ–±–æ–¥–Ω—ã–π —Ç–≤–æ—Ä—á–µ—Å–∫–∏–π,–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ—Ñ–∏—Å–Ω—ã–π,–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã–π —Å –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è–º–∏,–î–µ–∂—É—Ä—Å—Ç–≤–∞ –∏ —Å–º–µ–Ω—ã,–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã–π",
         "IT:4,CREATIVE:3,BUSINESS:2,SCIENCE:2,MEDICAL:1,TECHNICAL:2",
         "schedule", 12),

        ("–ß—Ç–æ —Ç–µ–±—è –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?",
         "–ù–æ–≤—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏,–ò—Å–∫—É—Å—Å—Ç–≤–æ –∏ –¥–∏–∑–∞–π–Ω,–ë–∏–∑–Ω–µ—Å-–ø—Ä–æ—Ü–µ—Å—Å—ã,–ù–∞—É—á–Ω—ã–µ —è–≤–ª–µ–Ω–∏—è,–ß–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ,–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Å–∏—Å—Ç–µ–º—ã",
         "IT:4,CREATIVE:4,BUSINESS:3,SCIENCE:4,MEDICAL:4,TECHNICAL:4",
         "interests", 13),

        ("–ö–∞–∫ —Ç—ã –æ—Ç–Ω–æ—Å–∏—à—å—Å—è –∫ —Ä–∞–±–æ—Ç–µ –≤ –∫–æ–º–∞–Ω–¥–µ?",
         "–ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞—é –Ω–µ–±–æ–ª—å—à–∏–µ –∫–æ–º–∞–Ω–¥—ã,–õ—é–±–ª—é —Ç–≤–æ—Ä—á–µ—Å–∫–∏–µ –∫–æ–ª–ª–∞–±–æ—Ä–∞—Ü–∏–∏,–û—Ç–ª–∏—á–Ω–æ —Ä–∞–±–æ—Ç–∞—é –≤ –∫–æ–º–∞–Ω–¥–µ,–†–∞–±–æ—Ç–∞—é –≤ –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –≥—Ä—É–ø–ø–∞—Ö,–ö–æ–º–∞–Ω–¥–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –≤ –º–µ–¥–∏—Ü–∏–Ω–µ,–†–∞–±–æ—Ç–∞—é —Å –±—Ä–∏–≥–∞–¥–æ–π",
         "IT:3,CREATIVE:3,BUSINESS:4,SCIENCE:3,MEDICAL:4,TECHNICAL:3",
         "teamwork", 14),

        ("–ß—Ç–æ –¥–ª—è —Ç–µ–±—è –≤–∞–∂–Ω–µ–µ –≤ —Ä–∞–±–æ—Ç–µ?",
         "–ò–Ω–Ω–æ–≤–∞—Ü–∏–∏ –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏,–ö—Ä–∞—Å–æ—Ç–∞ –∏ —ç—Å—Ç–µ—Ç–∏–∫–∞,–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç,–¢–æ—á–Ω–æ—Å—Ç—å –∏ –∞–Ω–∞–ª–∏–∑,–ó–¥–æ—Ä–æ–≤—å–µ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å,–ù–∞–¥–µ–∂–Ω–æ—Å—Ç—å –∏ –∫–∞—á–µ—Å—Ç–≤–æ",
         "IT:4,CREATIVE:4,BUSINESS:3,SCIENCE:3,MEDICAL:4,TECHNICAL:4",
         "priorities", 15)
    ]
    
    for question in questions_data:
        c.execute("""
        INSERT INTO test_questions(question_text, options, weights, category, order_num)
        VALUES(?,?,?,?,?)
        """, question)
    
    conn.commit()
    conn.close()
    print(f"Added {len(questions_data)} test questions to database")

def get_user_profile(user_id: int) -> Optional[Dict]:
    """–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute("""
    SELECT user_id, first_name, username, age_group, education, 
           interests, skills, current_job, satisfaction, created_at, updated_at
    FROM users WHERE user_id = ?
    """, (user_id,))
    
    row = c.fetchone()
    conn.close()
    
    if row:
        return {
            "user_id": row[0],
            "first_name": row[1],
            "username": row[2],
            "age_group": row[3],
            "education": row[4],
            "interests": row[5],
            "skills": row[6],
            "current_job": row[7],
            "satisfaction": row[8],
            "created_at": row[9],
            "updated_at": row[10]
        }
    return None

def save_user_profile(user_id: int, first_name: str, username: str, profile: Dict):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    now = datetime.utcnow().isoformat()
    
    c.execute("""
    INSERT INTO users(user_id, first_name, username, age_group, education, 
                     interests, skills, current_job, satisfaction, created_at, updated_at)
    VALUES(?,?,?,?,?,?,?,?,?,?,?)
    ON CONFLICT(user_id) DO UPDATE SET
      first_name=excluded.first_name,
      username=excluded.username,
      age_group=excluded.age_group,
      education=excluded.education,
      interests=excluded.interests,
      skills=excluded.skills,
      current_job=excluded.current_job,
      satisfaction=excluded.satisfaction,
      updated_at=excluded.updated_at
    """, (user_id, first_name, username, 
          profile.get("age_group"), profile.get("education"),
          profile.get("interests"), profile.get("skills"),
          profile.get("current_job"), profile.get("satisfaction"),
          now, now))
    
    conn.commit()
    conn.close()

def record_interaction(user_id: int, action: str, details: str = ""):
    """–ó–∞–ø–∏—Å–∞—Ç—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute("""
    INSERT INTO interactions(user_id, action, details, timestamp)
    VALUES(?,?,?,?)
    """, (user_id, action, details, datetime.utcnow().isoformat()))
    conn.commit()
    conn.close()

async def cleanup_old_messages(context: ContextTypes.DEFAULT_TYPE, user_id: int, keep_last: int = 2):
    """–£–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        if 'bot_messages' not in context.bot_data:
            context.bot_data['bot_messages'] = {}
        
        if user_id not in context.bot_data['bot_messages']:
            context.bot_data['bot_messages'][user_id] = []
        
        messages = context.bot_data['bot_messages'][user_id]
        
        while len(messages) > keep_last:
            old_message_id = messages.pop(0)
            try:
                await context.bot.delete_message(chat_id=user_id, message_id=old_message_id)
            except:
                pass
                
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")

async def track_message(context: ContextTypes.DEFAULT_TYPE, user_id: int, message_id: int):
    """–û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è"""
    try:
        if 'bot_messages' not in context.bot_data:
            context.bot_data['bot_messages'] = {}
        
        if user_id not in context.bot_data['bot_messages']:
            context.bot_data['bot_messages'][user_id] = []
        
        context.bot_data['bot_messages'][user_id].append(message_id)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /start - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    user = update.effective_user
    record_interaction(user.id, "start_command")

    profile = get_user_profile(user.id)
    
    welcome_text = f"üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n\n"
    welcome_text += "üéØ –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –Ω–∞–π—Ç–∏ –∏–¥–µ–∞–ª—å–Ω—É—é –ø—Ä–æ—Ñ–µ—Å—Å–∏—é!\n"
    welcome_text += "–ü—Ä–æ—Ö–æ–¥–∏ —Ç–µ—Å—Ç—ã, –∏–∑—É—á–∞–π –≤–∞—Ä–∏–∞–Ω—Ç—ã –∫–∞—Ä—å–µ—Ä—ã –∏ –ø–æ–ª—É—á–∞–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.\n\n"
    
    if not profile:
        welcome_text += "üìù –î–ª—è –Ω–∞—á–∞–ª–∞ –¥–∞–≤–∞–π —Å–æ–∑–¥–∞–¥–∏–º —Ç–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å!"
    
    keyboard = [
        [InlineKeyboardButton("üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", callback_data="profile")],
        [InlineKeyboardButton("üß† –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç", callback_data="test")],
        [InlineKeyboardButton("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", callback_data="recommendations")],
        [InlineKeyboardButton("üîç –ü–æ–∏—Å–∫ –ø—Ä–æ—Ñ–µ—Å—Å–∏–π", callback_data="search")],
        [InlineKeyboardButton("üíº –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏", callback_data="vacancies")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    sent_message = await update.message.reply_text(welcome_text, reply_markup=reply_markup)
    await track_message(context, user.id, sent_message.message_id)

async def profile_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /profile - –ø—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ—Ñ–∏–ª—è"""
    user = update.effective_user
    record_interaction(user.id, "profile_command")
    
    profile = get_user_profile(user.id)
    
    if not profile:
        await update.message.reply_text(
            "üìù –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–æ—Ñ–∏–ª—è. –î–∞–≤–∞–π —Å–æ–∑–¥–∞–¥–∏–º –µ–≥–æ!",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", callback_data="create_profile")
            ]])
        )
        return
    
    profile_text = f"üë§ –¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å:\n\n"
    profile_text += f"üë∂ –í–æ–∑—Ä–∞—Å—Ç–Ω–∞—è –≥—Ä—É–ø–ø–∞: {profile.get('age_group', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
    profile_text += f"üéì –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ: {profile.get('education', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
    profile_text += f"‚ù§Ô∏è –ò–Ω—Ç–µ—Ä–µ—Å—ã: {profile.get('interests', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
    profile_text += f"üõ†Ô∏è –ù–∞–≤—ã–∫–∏: {profile.get('skills', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
    profile_text += f"üíº –¢–µ–∫—É—â–∞—è —Ä–∞–±–æ—Ç–∞: {profile.get('current_job', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
    profile_text += f"üòä –£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {profile.get('satisfaction', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}/5"
    
    keyboard = [
        [InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="edit_profile")],
        [InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", callback_data="delete_profile")],
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    
    await update.message.reply_text(
        profile_text, 
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def test_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /test - –Ω–∞—á–∞—Ç—å –∫–∞—Ä—å–µ—Ä–Ω—ã–π —Ç–µ—Å—Ç"""
    user = update.effective_user
    record_interaction(user.id, "test_command")
    
    profile = get_user_profile(user.id)
    if not profile:
        await update.message.reply_text(
            "üìù –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π –ø—Ä–æ—Ñ–∏–ª—å, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏!",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", callback_data="create_profile")
            ]])
        )
        return
    
    await update.message.reply_text(
        "üß† –û—Ç–ª–∏—á–Ω–æ! –î–∞–≤–∞–π –ø—Ä–æ–π–¥–µ–º –∫–∞—Ä—å–µ—Ä–Ω—ã–π —Ç–µ—Å—Ç.\n\n"
        "–Ø –∑–∞–¥–∞–º —Ç–µ–±–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤, —á—Ç–æ–±—ã –ø–æ–Ω—è—Ç—å, –∫–∞–∫–∏–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ —Ç–µ–±–µ –ø–æ–¥—Ö–æ–¥—è—Ç.\n"
        "–ì–æ—Ç–æ–≤ –Ω–∞—á–∞—Ç—å?",
        reply_markup=InlineKeyboardMarkup([[
            InlineKeyboardButton("‚úÖ –ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç", callback_data="start_test")
        ]])
    )

def generate_recommendations(user_id: int, top_k: int = 5) -> List[Dict]:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ—Ñ–∏–ª—è –∏ —Ç–µ—Å—Ç–æ–≤"""
    profile = get_user_profile(user_id)
    test_results = get_user_test_results(user_id)
    all_careers = get_careers_by_category()
    
    if not profile:
        return []
    
    interests = set([i.strip().lower() for i in (profile.get("interests") or "").split(",") if i.strip()])
    skills = set([s.strip().lower() for s in (profile.get("skills") or "").split(",") if s.strip()])
    education = profile.get("education", "").lower()
    satisfaction = profile.get("satisfaction", 3)
    
    career_scores = []
    
    for career in all_careers:
        score = 0
        
        career_tags = set([t.lower() for t in career["tags"] if t])
        interest_matches = len(interests & career_tags)
        score += interest_matches * 3
        
        career_skills = set([s.lower() for s in career["skills_required"] if s])
        skill_matches = len(skills & career_skills)
        score += skill_matches * 4
    
        if education and education in (career["education_level"] or "").lower():
            score += 2

        if test_results:
            career_category = career["category"]

            category_mapping = {
                "IT –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏": "IT",
                "–¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ –∏ –¥–∏–∑–∞–π–Ω": "CREATIVE", 
                "–ë–∏–∑–Ω–µ—Å –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ": "BUSINESS",
                "–ù–∞—É–∫–∞ –∏ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ": "SCIENCE",
                "–ú–µ–¥–∏—Ü–∏–Ω–∞ –∏ –∑–¥–æ—Ä–æ–≤—å–µ": "MEDICAL",
                "–†–∞–±–æ—á–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏": "TECHNICAL",
                "–°—Ñ–µ—Ä–∞ —É—Å–ª—É–≥": "SERVICE"
            }
            
            mapped_category = category_mapping.get(career_category)
            if mapped_category and mapped_category in test_results:
                score += test_results[mapped_category] * 5

        if satisfaction <= 2:
            if "creative" in career_tags or "product" in career_tags or "design" in career_tags:
                score += 2
        
        career_scores.append((score, career))
    
    career_scores.sort(key=lambda x: x[0], reverse=True)

    return [career for score, career in career_scores[:top_k] if score > 0]

async def recommendations_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /recommendations - –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"""
    user = update.effective_user
    record_interaction(user.id, "recommendations_command")
    
    profile = get_user_profile(user.id)
    if not profile:
        await update.message.reply_text(
            "üìù –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π –ø—Ä–æ—Ñ–∏–ª—å, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏!",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", callback_data="create_profile")
            ]])
        )
        return

    recommendations = generate_recommendations(user.id, top_k=5)
    
    if not recommendations:
        await update.message.reply_text(
            "üòî –ü–æ–∫–∞ –Ω–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏.\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π:\n"
            "‚Ä¢ –ü—Ä–æ–π—Ç–∏ –∫–∞—Ä—å–µ—Ä–Ω—ã–π —Ç–µ—Å—Ç (/test)\n"
            "‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ –∏ –Ω–∞–≤—ã–∫–æ–≤ –≤ –ø—Ä–æ—Ñ–∏–ª—å\n"
            "‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ–∏—Å–∫ –ø—Ä–æ—Ñ–µ—Å—Å–∏–π (/search)",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üß† –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç", callback_data="test"),
                InlineKeyboardButton("üîç –ü–æ–∏—Å–∫", callback_data="search")
            ]])
        )
        return

    text = "üí° –¢–≤–æ–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n\n"
    
    for i, career in enumerate(recommendations, 1):
        text += f"{i}. {career['name']}\n"
        text += f"üìÇ {career['category']}\n"
        text += f"üí∞ {career['salary_range']} —Ä—É–±/–º–µ—Å\n"
        text += f"üìù {career['description'][:100]}...\n"
        
        if career['skills_required']:
            skills_text = ", ".join(career['skills_required'][:3])
            text += f"üõ†Ô∏è –ù–∞–≤—ã–∫–∏: {skills_text}\n"
        
        text += f"üéì {career['education_level']}\n\n"
    
    text += "üí° –•–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ –∫–∞–∫–æ–π-—Ç–æ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏? –ò—Å–ø–æ–ª—å–∑—É–π /search"
    
    keyboard = [
        [InlineKeyboardButton("üß† –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç", callback_data="test")],
        [InlineKeyboardButton("üîç –ü–æ–∏—Å–∫ –ø—Ä–æ—Ñ–µ—Å—Å–∏–π", callback_data="search")],
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    
    await update.message.reply_text(
        text, 
        parse_mode="Markdown",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def search_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /search - –ø–æ–∏—Å–∫ –ø—Ä–æ—Ñ–µ—Å—Å–∏–π"""
    user = update.effective_user
    record_interaction(user.id, "search_command")
    
    await update.message.reply_text(
        "üîç –ü–æ–∏—Å–∫ –ø—Ä–æ—Ñ–µ—Å—Å–∏–π\n\n"
        "–í–≤–µ–¥–∏ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: '–ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç', '–¥–∏–∑–∞–π–Ω', '–º–µ–¥–∏—Ü–∏–Ω–∞'):"
    )
    
    return SEARCH_QUERY

async def vacancies_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /vacancies - –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏"""
    user = update.effective_user
    record_interaction(user.id, "vacancies_command")
    
    await update.message.reply_text(
        "üíº –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏\n\n"
        "–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–π –Ω–∞ HH.ru:"
    )
    
    return SEARCH_QUERY

async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ inline-–∫–Ω–æ–ø–∫–∏"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    data = query.data
    
    if data == "main_menu":
        await handle_main_menu_callback(query, context)
    elif data == "profile":
        await handle_profile_callback(query, context)
    elif data == "test":
        await handle_test_callback(query, context)
    elif data == "recommendations":
        await handle_recommendations_callback(query, context)
    elif data == "search":
        await handle_search_callback(query, context)
    elif data == "vacancies":
        await handle_vacancies_callback(query, context)
    elif data == "create_profile":
        await start_profile_creation(query, context)
    elif data == "edit_profile":
        await start_profile_editing(query, context)
    elif data == "start_test":
        await start_career_test(query, context)
    elif data.startswith("age_"):
        await handle_age_selection(query, context, data)
    elif data == "skip_age":
        await handle_skip_age(query, context)
    elif data.startswith("edu_"):
        await handle_education_selection(query, context, data)
    elif data == "skip_education":
        await handle_skip_education(query, context)
    elif data == "save_interests":
        await handle_save_interests(query, context)
    elif data == "skip_interests":
        await handle_skip_interests(query, context)
    elif data == "save_skills":
        await handle_save_skills(query, context)
    elif data == "skip_skills":
        await handle_skip_skills(query, context)
    elif data == "save_current_job":
        await handle_save_current_job(query, context)
    elif data == "skip_current_job":
        await handle_skip_current_job(query, context)
    elif data.startswith("satisfaction_"):
        await handle_satisfaction_selection(query, context, data)
    elif data == "skip_satisfaction":
        await handle_skip_satisfaction(query, context)
    elif data == "complete_profile":
        await handle_complete_profile(query, context)
    elif data.startswith("test_answer_"):
        await handle_test_answer(query, context, data)
    elif data == "finish_test":
        await handle_finish_test(query, context)
    elif data == "edit_age":
        await handle_edit_age(query, context)
    elif data == "edit_education":
        await handle_edit_education(query, context)
    elif data == "edit_interests":
        await handle_edit_interests(query, context)
    elif data == "edit_skills":
        await handle_edit_skills(query, context)
    elif data == "edit_current_job":
        await handle_edit_current_job(query, context)
    elif data == "edit_satisfaction":
        await handle_edit_satisfaction(query, context)
    elif data == "delete_profile":
        await handle_delete_profile(query, context)
    elif data == "confirm_delete":
        await handle_confirm_delete(query, context)
    elif data == "cancel_delete":
        await handle_cancel_delete(query, context)
    else:
        await query.message.reply_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")

async def handle_main_menu_callback(query, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    user = query.from_user
    record_interaction(user.id, "main_menu_callback")
    
    welcome_text = f"üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n\n"
    welcome_text += "üéØ –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –Ω–∞–π—Ç–∏ –∏–¥–µ–∞–ª—å–Ω—É—é –ø—Ä–æ—Ñ–µ—Å—Å–∏—é!\n"
    welcome_text += "–ü—Ä–æ—Ö–æ–¥–∏ —Ç–µ—Å—Ç—ã, –∏–∑—É—á–∞–π –≤–∞—Ä–∏–∞–Ω—Ç—ã –∫–∞—Ä—å–µ—Ä—ã –∏ –ø–æ–ª—É—á–∞–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.\n\n"
    
    keyboard = [
        [InlineKeyboardButton("üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", callback_data="profile")],
        [InlineKeyboardButton("üß† –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç", callback_data="test")],
        [InlineKeyboardButton("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", callback_data="recommendations")],
        [InlineKeyboardButton("üîç –ü–æ–∏—Å–∫ –ø—Ä–æ—Ñ–µ—Å—Å–∏–π", callback_data="search")],
        [InlineKeyboardButton("üíº –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏", callback_data="vacancies")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.message.reply_text(welcome_text, reply_markup=reply_markup)

async def handle_profile_callback(query, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Ñ–∏–ª—è"""
    user = query.from_user
    record_interaction(user.id, "profile_callback")
    
    profile = get_user_profile(user.id)
    
    if not profile:
        await query.message.reply_text(
            "üìù –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–æ—Ñ–∏–ª—è. –î–∞–≤–∞–π —Å–æ–∑–¥–∞–¥–∏–º –µ–≥–æ!",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", callback_data="create_profile")
            ]])
        )
        return
    
    profile_text = f"üë§ –¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å:\n\n"
    profile_text += f"üë∂ –í–æ–∑—Ä–∞—Å—Ç–Ω–∞—è –≥—Ä—É–ø–ø–∞: {profile.get('age_group', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
    profile_text += f"üéì –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ: {profile.get('education', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
    profile_text += f"‚ù§Ô∏è –ò–Ω—Ç–µ—Ä–µ—Å—ã: {profile.get('interests', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
    profile_text += f"üõ†Ô∏è –ù–∞–≤—ã–∫–∏: {profile.get('skills', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
    profile_text += f"üíº –¢–µ–∫—É—â–∞—è —Ä–∞–±–æ—Ç–∞: {profile.get('current_job', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
    profile_text += f"üòä –£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {profile.get('satisfaction', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}/5"
    
    keyboard = [
        [InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="edit_profile")],
        [InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", callback_data="delete_profile")],
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    
    await query.message.reply_text(
        profile_text, 
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def handle_test_callback(query, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ—Å—Ç–∞"""
    user = query.from_user
    record_interaction(user.id, "test_callback")
    
    profile = get_user_profile(user.id)
    if not profile:
        await query.message.reply_text(
            "üìù –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π –ø—Ä–æ—Ñ–∏–ª—å, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏!",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", callback_data="create_profile")
            ]])
        )
        return
    
    await query.message.reply_text(
        "üß† –û—Ç–ª–∏—á–Ω–æ! –î–∞–≤–∞–π –ø—Ä–æ–π–¥–µ–º –∫–∞—Ä—å–µ—Ä–Ω—ã–π —Ç–µ—Å—Ç.\n\n"
        "–Ø –∑–∞–¥–∞–º —Ç–µ–±–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤, —á—Ç–æ–±—ã –ø–æ–Ω—è—Ç—å, –∫–∞–∫–∏–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ —Ç–µ–±–µ –ø–æ–¥—Ö–æ–¥—è—Ç.\n"
        "–ì–æ—Ç–æ–≤ –Ω–∞—á–∞—Ç—å?",
        reply_markup=InlineKeyboardMarkup([[
            InlineKeyboardButton("‚úÖ –ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç", callback_data="start_test")
        ]])
    )

async def handle_recommendations_callback(query, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π"""
    user = query.from_user
    record_interaction(user.id, "recommendations_callback")
    
    profile = get_user_profile(user.id)
    if not profile:
        await query.message.reply_text(
            "üìù –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π –ø—Ä–æ—Ñ–∏–ª—å, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏!",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", callback_data="create_profile")
            ]])
        )
        return
    
    loading_msg = await query.message.reply_text("üîÑ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å...")
    await asyncio.sleep(1)
    
    await loading_msg.edit_text("üß† –ò–∑—É—á–∞–µ–º —Ç–≤–æ–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã –∏ –Ω–∞–≤—ã–∫–∏...")
    await asyncio.sleep(1)
    
    await loading_msg.edit_text("üìä –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å –±–∞–∑–æ–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–π...")
    await asyncio.sleep(1)
    
    await loading_msg.edit_text("üí° –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏...")
    await asyncio.sleep(1)
    
    recommendations = generate_recommendations(user.id, top_k=5)
    
    if not recommendations:
        await loading_msg.edit_text(
            "üòî –ü–æ–∫–∞ –Ω–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏.\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π:\n"
            "‚Ä¢ –ü—Ä–æ–π—Ç–∏ –∫–∞—Ä—å–µ—Ä–Ω—ã–π —Ç–µ—Å—Ç (/test)\n"
            "‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ –∏ –Ω–∞–≤—ã–∫–æ–≤ –≤ –ø—Ä–æ—Ñ–∏–ª—å\n"
            "‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ–∏—Å–∫ –ø—Ä–æ—Ñ–µ—Å—Å–∏–π (/search)",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üß† –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç", callback_data="test"),
                InlineKeyboardButton("üîç –ü–æ–∏—Å–∫", callback_data="search")
            ]])
        )
        return
    
    await loading_msg.edit_text("‚ú® –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –≥–æ—Ç–æ–≤—ã!")
    await asyncio.sleep(1)
    
    text = "üéØ –¢–≤–æ–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n\n"
    
    for i, career in enumerate(recommendations, 1):
        category_emoji = {
            "IT –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏": "üíª",
            "–¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ –∏ –¥–∏–∑–∞–π–Ω": "üé®",
            "–ë–∏–∑–Ω–µ—Å –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ": "üíº",
            "–ù–∞—É–∫–∞ –∏ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ": "üî¨",
            "–ú–µ–¥–∏—Ü–∏–Ω–∞ –∏ –∑–¥–æ—Ä–æ–≤—å–µ": "üè•",
            "–†–∞–±–æ—á–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏": "üîß",
            "–°—Ñ–µ—Ä–∞ —É—Å–ª—É–≥": "ü§ù"
        }
        
        emoji = category_emoji.get(career['category'], "üìà")
        
        text += f"{emoji} {i}. {career['name']}\n"
        text += f"üìÇ {career['category']}\n"
        text += f"üí∞ {career['salary_range']} —Ä—É–±/–º–µ—Å\n"
        text += f"üìù {career['description'][:100]}...\n"
        
        if career['skills_required']:
            skills_text = ", ".join(career['skills_required'][:3])
            text += f"üõ†Ô∏è –ù–∞–≤—ã–∫–∏: {skills_text}\n"
        
        text += f"üéì {career['education_level']}\n\n"
    
    text += "üí° –•–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ –∫–∞–∫–æ–π-—Ç–æ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏? –ò—Å–ø–æ–ª—å–∑—É–π –ø–æ–∏—Å–∫!"
    
    keyboard = [
        [InlineKeyboardButton("üß† –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç", callback_data="test")],
        [InlineKeyboardButton("üîç –ü–æ–∏—Å–∫ –ø—Ä–æ—Ñ–µ—Å—Å–∏–π", callback_data="search")],
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    
    await loading_msg.edit_text(
        text, 
        parse_mode="Markdown",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def handle_search_callback(query, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∏—Å–∫–∞"""
    user = query.from_user
    record_interaction(user.id, "search_callback")
    
    await query.message.reply_text(
        "üîç –ü–æ–∏—Å–∫ –ø—Ä–æ—Ñ–µ—Å—Å–∏–π\n\n"
        "–í–≤–µ–¥–∏ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: '–ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç', '–¥–∏–∑–∞–π–Ω', '–º–µ–¥–∏—Ü–∏–Ω–∞'):"
    )

    context.user_data['waiting_for_search'] = True

async def handle_vacancies_callback(query, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–∞–∫–∞–Ω—Å–∏–π"""
    user = query.from_user
    record_interaction(user.id, "vacancies_callback")
    
    context.user_data['search_platform'] = 'hh'
    context.user_data['waiting_for_vacancy_search'] = True
    
    await query.message.reply_text(
        "üíº –ü–æ–∏—Å–∫ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π –Ω–∞ HH.ru\n\n"
        "–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–π:",
        parse_mode="Markdown"
    )

async def start_profile_creation(query, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è"""
    user = query.from_user
    record_interaction(user.id, "start_profile_creation")
    
    context.user_data['profile'] = {
        'user_id': user.id,
        'first_name': user.first_name,
        'username': user.username
    }
    
    loading_msg = await query.message.reply_text("üîÑ –°–æ–∑–¥–∞–µ–º —Ç–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å...")
    await asyncio.sleep(1)
    
    await loading_msg.edit_text("‚ú® –û—Ç–ª–∏—á–Ω–æ! –î–∞–≤–∞–π —Å–æ–∑–¥–∞–¥–∏–º —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å!")
    await asyncio.sleep(1)
    
    await loading_msg.edit_text(
        "üë∂ –®–∞–≥ 1/6: –í–æ–∑—Ä–∞—Å—Ç–Ω–∞—è –≥—Ä—É–ø–ø–∞\n\n"
        "–í—ã–±–µ—Ä–∏ —Å–≤–æ—é –≤–æ–∑—Ä–∞—Å—Ç–Ω—É—é –≥—Ä—É–ø–ø—É:",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("13-17 –ª–µ—Ç", callback_data="age_13_17")],
            [InlineKeyboardButton("18-24 –≥–æ–¥–∞", callback_data="age_18_24")],
            [InlineKeyboardButton("25-35 –ª–µ—Ç", callback_data="age_25_35")],
            [InlineKeyboardButton("36+ –ª–µ—Ç", callback_data="age_36_plus")],
            [InlineKeyboardButton("‚ùå –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_age")]
        ])
    )

async def start_profile_editing(query, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è"""
    user = query.from_user
    record_interaction(user.id, "start_profile_editing")
    
    profile = get_user_profile(user.id)
    if not profile:
        await query.message.reply_text(
            "üìù –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è!",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", callback_data="create_profile")
            ]])
        )
        return
    
    profile_text = "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è\n\n"
    profile_text += f"üë∂ –í–æ–∑—Ä–∞—Å—Ç–Ω–∞—è –≥—Ä—É–ø–ø–∞: {profile.get('age_group', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
    profile_text += f"üéì –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ: {profile.get('education', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
    profile_text += f"‚ù§Ô∏è –ò–Ω—Ç–µ—Ä–µ—Å—ã: {profile.get('interests', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
    profile_text += f"üõ†Ô∏è –ù–∞–≤—ã–∫–∏: {profile.get('skills', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
    profile_text += f"üíº –¢–µ–∫—É—â–∞—è —Ä–∞–±–æ—Ç–∞: {profile.get('current_job', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
    profile_text += f"üòä –£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {profile.get('satisfaction', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}/5\n\n"
    profile_text += "–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ö–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å:"
    
    keyboard = [
        [InlineKeyboardButton("üë∂ –í–æ–∑—Ä–∞—Å—Ç–Ω–∞—è –≥—Ä—É–ø–ø–∞", callback_data="edit_age")],
        [InlineKeyboardButton("üéì –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ", callback_data="edit_education")],
        [InlineKeyboardButton("‚ù§Ô∏è –ò–Ω—Ç–µ—Ä–µ—Å—ã", callback_data="edit_interests")],
        [InlineKeyboardButton("üõ†Ô∏è –ù–∞–≤—ã–∫–∏", callback_data="edit_skills")],
        [InlineKeyboardButton("üíº –¢–µ–∫—É—â–∞—è —Ä–∞–±–æ—Ç–∞", callback_data="edit_current_job")],
        [InlineKeyboardButton("üòä –£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç—å", callback_data="edit_satisfaction")],
        [InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", callback_data="delete_profile")],
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    
    await query.message.reply_text(
        profile_text,
        parse_mode="Markdown",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def handle_age_selection(query, context: ContextTypes.DEFAULT_TYPE, data: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤–æ–∑—Ä–∞—Å—Ç–Ω–æ–π –≥—Ä—É–ø–ø—ã"""
    user = query.from_user
    record_interaction(user.id, "age_selection", data)
    
    age_mapping = {
        "age_13_17": "13-17 –ª–µ—Ç",
        "age_18_24": "18-24 –≥–æ–¥–∞", 
        "age_25_35": "25-35 –ª–µ—Ç",
        "age_36_plus": "36+ –ª–µ—Ç"
    }
    
    if 'profile' in context.user_data:
        context.user_data['profile']['age_group'] = age_mapping[data]

        age_group = age_mapping[data]
        is_under_18 = age_group == "13-17 –ª–µ—Ç"
        
        if is_under_18:
            context.user_data['profile']['total_steps'] = 5 
        else:
            context.user_data['profile']['total_steps'] = 6

        await query.message.edit_text("‚úÖ –í–æ–∑—Ä–∞—Å—Ç–Ω–∞—è –≥—Ä—É–ø–ø–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")
        await asyncio.sleep(1)
        
        step_num = 2
        total_steps = context.user_data['profile']['total_steps']
        await query.message.edit_text(
            f"üéì –®–∞–≥ {step_num}/{total_steps}: –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ\n\n"
            "–í—ã–±–µ—Ä–∏ —Å–≤–æ–π —É—Ä–æ–≤–µ–Ω—å –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è:",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üè´ –®–∫–æ–ª–∞", callback_data="edu_school")],
                [InlineKeyboardButton("üéì –í–£–ó", callback_data="edu_university")],
                [InlineKeyboardButton("üìö –ö—É—Ä—Å—ã", callback_data="edu_courses")],
                [InlineKeyboardButton("üíº –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã", callback_data="edu_experience")],
                [InlineKeyboardButton("‚ùå –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_education")]
            ])
        )
    else:
        profile = get_user_profile(user.id)
        if profile:
            profile['age_group'] = age_mapping[data]
            save_user_profile(user.id, user.first_name, user.username, profile)
            await query.message.edit_text("‚úÖ –í–æ–∑—Ä–∞—Å—Ç–Ω–∞—è –≥—Ä—É–ø–ø–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
            await asyncio.sleep(1)
            await query.message.edit_text(
                "‚úèÔ∏è –ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω!",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –µ—â–µ", callback_data="edit_profile"),
                    InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
                ]])
            )

async def handle_skip_age(query, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ–ø—É—Å–∫ –≤–æ–∑—Ä–∞—Å—Ç–Ω–æ–π –≥—Ä—É–ø–ø—ã"""
    await handle_age_selection(query, context, "age_18_24")

async def handle_education_selection(query, context: ContextTypes.DEFAULT_TYPE, data: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è"""
    user = query.from_user
    record_interaction(user.id, "education_selection", data)

    edu_mapping = {
        "edu_school": "–®–∫–æ–ª–∞",
        "edu_university": "–í–£–ó",
        "edu_courses": "–ö—É—Ä—Å—ã", 
        "edu_experience": "–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã"
    }

    if 'profile' in context.user_data:
        context.user_data['profile']['education'] = edu_mapping[data]
        
        await query.message.edit_text("‚úÖ –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!")
        await asyncio.sleep(1)
        
        step_num = 3
        total_steps = context.user_data['profile']['total_steps']
        await query.message.edit_text(
            f"‚ù§Ô∏è –®–∞–≥ {step_num}/{total_steps}: –ò–Ω—Ç–µ—Ä–µ—Å—ã\n\n"
            "–ù–∞–ø–∏—à–∏ —Å–≤–æ–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ, –¥–∏–∑–∞–π–Ω, –º—É–∑—ã–∫–∞, —Å–ø–æ—Ä—Ç):",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data="save_interests")],
                [InlineKeyboardButton("‚ùå –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_interests")]
            ])
        )
        
        context.user_data['waiting_for_interests'] = True
    else:
        profile = get_user_profile(user.id)
        if profile:
            profile['education'] = edu_mapping[data]
            save_user_profile(user.id, user.first_name, user.username, profile)
            await query.message.edit_text("‚úÖ –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
            await asyncio.sleep(1)
            await query.message.edit_text(
                "‚úèÔ∏è –ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω!",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –µ—â–µ", callback_data="edit_profile"),
                    InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
                ]])
            )

async def handle_skip_education(query, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ–ø—É—Å–∫ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è"""
    await handle_education_selection(query, context, "edu_courses")

async def handle_save_interests(query, context: ContextTypes.DEFAULT_TYPE):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤"""
    if 'interests' not in context.user_data['profile']:
        context.user_data['profile']['interests'] = "–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ, –¥–∏–∑–∞–π–Ω, —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ"
    
    await query.message.edit_text("‚úÖ –ò–Ω—Ç–µ—Ä–µ—Å—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
    await asyncio.sleep(1)

    await query.message.edit_text(
        "üõ†Ô∏è –®–∞–≥ 4/6: –ù–∞–≤—ã–∫–∏\n\n"
        "–ù–∞–ø–∏—à–∏ —Å–≤–æ–∏ –Ω–∞–≤—ã–∫–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: Python, PhotoShop, C++, C#):",
        parse_mode="Markdown",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data="save_skills")],
            [InlineKeyboardButton("‚ùå –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_skills")]
        ])
    )
    
    context.user_data['waiting_for_skills'] = True

async def handle_skip_interests(query, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ–ø—É—Å–∫ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤"""
    context.user_data['profile']['interests'] = "–æ–±—â–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã"
    await handle_save_interests(query, context)

async def handle_save_skills(query, context: ContextTypes.DEFAULT_TYPE):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞–≤—ã–∫–æ–≤"""
    if 'skills' not in context.user_data['profile']:
        context.user_data['profile']['skills'] = "–∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏, —Ä–∞–±–æ—Ç–∞ –≤ –∫–æ–º–∞–Ω–¥–µ"
    
    await query.message.edit_text("‚úÖ –ù–∞–≤—ã–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
    await asyncio.sleep(1)

    age_group = context.user_data['profile'].get('age_group', '')
    is_under_18 = age_group == "13-17 –ª–µ—Ç"
    
    if is_under_18:
        step_num = 4
        total_steps = context.user_data['profile']['total_steps']
        await query.message.edit_text(
            f"üíº –®–∞–≥ {step_num}/{total_steps}: –ü–æ–¥—Ä–∞–±–æ—Ç–∫–∞\n\n"
            "–ï—Å—Ç—å –ª–∏ —É —Ç–µ–±—è –æ–ø—ã—Ç –ø–æ–¥—Ä–∞–±–æ—Ç–∫–∏? –ù–∞–ø–∏—à–∏ —á—Ç–æ-—Ç–æ –≤—Ä–æ–¥–µ '—Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä—Å—Ç–≤–æ', '–ø–æ–º–æ—â—å –≤ –º–∞–≥–∞–∑–∏–Ω–µ' –∏–ª–∏ '–Ω–µ—Ç –æ–ø—ã—Ç–∞':",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data="save_current_job")],
                [InlineKeyboardButton("‚ùå –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_current_job")]
            ])
        )
    else:
        step_num = 5
        total_steps = context.user_data['profile']['total_steps']
        await query.message.edit_text(
            f"üíº –®–∞–≥ {step_num}/{total_steps}: –¢–µ–∫—É—â–∞—è —Ä–∞–±–æ—Ç–∞\n\n"
            "–ù–∞–ø–∏—à–∏ —Å–≤–æ—é —Ç–µ–∫—É—â—É—é –ø—Ä–æ—Ñ–µ—Å—Å–∏—é –∏–ª–∏ '–ë–µ–∑—Ä–∞–±–æ—Ç–Ω—ã–π' –µ—Å–ª–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—à—å:",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data="save_current_job")],
                [InlineKeyboardButton("‚ùå –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_current_job")]
            ])
        )
    
    context.user_data['waiting_for_current_job'] = True

async def handle_skip_skills(query, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ–ø—É—Å–∫ –Ω–∞–≤—ã–∫–æ–≤"""
    context.user_data['profile']['skills'] = "–±–∞–∑–æ–≤—ã–µ –Ω–∞–≤—ã–∫–∏"
    await handle_save_skills(query, context)

async def handle_save_current_job(query, context: ContextTypes.DEFAULT_TYPE):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Ä–∞–±–æ—Ç—ã"""
    if 'current_job' not in context.user_data['profile']:
        context.user_data['profile']['current_job'] = "–ë–µ–∑—Ä–∞–±–æ—Ç–Ω—ã–π"
    
    await query.message.edit_text("‚úÖ –¢–µ–∫—É—â–∞—è —Ä–∞–±–æ—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")
    await asyncio.sleep(1)
    
    age_group = context.user_data['profile'].get('age_group', '')
    is_under_18 = age_group == "13-17 –ª–µ—Ç"
    
    step_num = 5 if is_under_18 else 6
    total_steps = context.user_data['profile']['total_steps']
    
    if is_under_18:
        question_text = "–û—Ü–µ–Ω–∏ —Å–≤–æ—é —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç—å –ø–æ–¥—Ä–∞–±–æ—Ç–∫–æ–π –∏–ª–∏ —É—á–µ–±–æ–π (1-5):"
    else:
        question_text = "–û—Ü–µ–Ω–∏ —Å–≤–æ—é —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç—å —Ç–µ–∫—É—â–µ–π —Ä–∞–±–æ—Ç–æ–π (1-5):"
    
    await query.message.edit_text(
        f"üòä –®–∞–≥ {step_num}/{total_steps}: –£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç—å\n\n"
        f"{question_text}",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üò¢ 1", callback_data="satisfaction_1"),
             InlineKeyboardButton("üòî 2", callback_data="satisfaction_2")],
            [InlineKeyboardButton("üòê 3", callback_data="satisfaction_3"),
             InlineKeyboardButton("üòä 4", callback_data="satisfaction_4")],
            [InlineKeyboardButton("üòç 5", callback_data="satisfaction_5")],
            [InlineKeyboardButton("‚ùå –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_satisfaction")]
        ])
    )

async def handle_skip_current_job(query, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ–ø—É—Å–∫ —Ç–µ–∫—É—â–µ–π —Ä–∞–±–æ—Ç—ã"""
    context.user_data['profile']['current_job'] = "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
    await handle_save_current_job(query, context)

async def handle_satisfaction_selection(query, context: ContextTypes.DEFAULT_TYPE, data: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏"""
    user = query.from_user
    record_interaction(user.id, "satisfaction_selection", data)
    
    satisfaction = int(data.split("_")[1])

    if 'profile' in context.user_data:
        context.user_data['profile']['satisfaction'] = satisfaction
        
        await query.message.edit_text("‚úÖ –£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")
        await asyncio.sleep(1)
        
        await handle_complete_profile(query, context)

    else:
        profile = get_user_profile(user.id)
        if profile:
            profile['satisfaction'] = satisfaction
            save_user_profile(user.id, user.first_name, user.username, profile)
            await query.message.edit_text("‚úÖ –£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
            await asyncio.sleep(1)
            await query.message.edit_text(
                "‚úèÔ∏è –ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω!",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –µ—â–µ", callback_data="edit_profile"),
                    InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
                ]])
            )

async def handle_skip_satisfaction(query, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ–ø—É—Å–∫ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏"""
    context.user_data['profile']['satisfaction'] = 3
    await handle_satisfaction_selection(query, context, "satisfaction_3")

async def handle_complete_profile(query, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è"""
    user = query.from_user
    profile = context.user_data['profile']
    
    save_user_profile(
        user.id, 
        user.first_name, 
        user.username, 
        profile
    )
    
    record_interaction(user.id, "profile_completed")

    await query.message.edit_text("üéâ –°–æ–∑–¥–∞–µ–º —Ç–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å...")
    await asyncio.sleep(1)
    
    await query.message.edit_text("‚ú® –ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")
    await asyncio.sleep(1)
    
    profile_text = "üë§ –¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω!\n\n"
    profile_text += f"üë∂ –í–æ–∑—Ä–∞—Å—Ç–Ω–∞—è –≥—Ä—É–ø–ø–∞: {profile.get('age_group', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
    profile_text += f"üéì –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ: {profile.get('education', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
    profile_text += f"‚ù§Ô∏è –ò–Ω—Ç–µ—Ä–µ—Å—ã: {profile.get('interests', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
    profile_text += f"üõ†Ô∏è –ù–∞–≤—ã–∫–∏: {profile.get('skills', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
    profile_text += f"üíº –¢–µ–∫—É—â–∞—è —Ä–∞–±–æ—Ç–∞: {profile.get('current_job', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
    profile_text += f"üòä –£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {profile.get('satisfaction', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}/5\n\n"
    profile_text += "üéØ –¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –ø–æ–ª—É—á–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏!"
    
    keyboard = [
        [InlineKeyboardButton("üí° –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", callback_data="recommendations")],
        [InlineKeyboardButton("üß† –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç", callback_data="test")],
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    
    await query.message.edit_text(
        profile_text,
        parse_mode="Markdown",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    
    context.user_data.pop('profile', None)
    context.user_data.pop('waiting_for_interests', None)
    context.user_data.pop('waiting_for_skills', None)
    context.user_data.pop('waiting_for_current_job', None)

async def start_career_test(query, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞—Ç—å –∫–∞—Ä—å–µ—Ä–Ω—ã–π —Ç–µ—Å—Ç"""
    user = query.from_user
    record_interaction(user.id, "start_career_test")
    
    questions = get_test_questions()
    context.user_data['test'] = {
        'questions': questions,
        'current_question': 0,
        'answers': {},
        'scores': {category: 0 for category in CAREER_CATEGORIES.keys()}
    }
    
    loading_msg = await query.message.reply_text("üîÑ –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ—Å—Ç...")
    await asyncio.sleep(1)
    
    await loading_msg.edit_text("üß† –ü–∏—à–µ–º –≤–æ–ø—Ä–æ—Å—ã...")
    await asyncio.sleep(1)
    
    await loading_msg.edit_text("‚ú® –¢–µ—Å—Ç –≥–æ—Ç–æ–≤! –ù–∞—á–∏–Ω–∞–µ–º...")
    await asyncio.sleep(1)
    
    await show_test_question(query, context)

async def show_test_question(query, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å —Ç–µ—Å—Ç–∞"""
    test_data = context.user_data['test']
    current_q = test_data['current_question']
    questions = test_data['questions']
    
    if current_q >= len(questions):
        await finish_test(query, context)
        return
    
    question = questions[current_q]
    progress = f"–í–æ–ø—Ä–æ—Å {current_q + 1}/{len(questions)}"
    
    buttons = []
    for i, option in enumerate(question['options']):
        buttons.append([InlineKeyboardButton(
            f"{i + 1}. {option}", 
            callback_data=f"test_answer_{i}"
        )])
    
    buttons.append([InlineKeyboardButton("üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ—Å—Ç", callback_data="finish_test")])
    
    text = f"üß† {progress}\n\n"
    text += f"{question['question_text']}\n\n"
    text += "–í—ã–±–µ—Ä–∏ –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –æ—Ç–≤–µ—Ç:"
    
    await query.message.edit_text(
        text,
        parse_mode="Markdown",
        reply_markup=InlineKeyboardMarkup(buttons)
    )

async def handle_test_answer(query, context: ContextTypes.DEFAULT_TYPE, data: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å —Ç–µ—Å—Ç–∞"""
    user = query.from_user
    answer_index = int(data.split("_")[2])
    
    test_data = context.user_data['test']
    current_q = test_data['current_question']
    question = test_data['questions'][current_q]

    test_data['answers'][current_q] = answer_index

    weights_str = question['weights']
    for weight_pair in weights_str.split(','):
        if ':' in weight_pair:
            category, weight = weight_pair.split(':')
            test_data['scores'][category] += int(weight)
    
    record_interaction(user.id, "test_answer", f"q{current_q}_a{answer_index}")
    
    selected_option = question['options'][answer_index]
    await query.message.edit_text(f"‚úÖ –í—ã–±—Ä–∞–Ω–æ: {selected_option}")
    await asyncio.sleep(1)
    
    test_data['current_question'] += 1
    
    if test_data['current_question'] < len(test_data['questions']):

        progress_text = f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {test_data['current_question']}/{len(test_data['questions'])}"
        await query.message.edit_text(progress_text)
        await asyncio.sleep(1)
        await show_test_question(query, context)
    else:
        await finish_test(query, context)

async def handle_finish_test(query, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞"""
    await finish_test(query, context)

async def finish_test(query, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏ –∞–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∞"""
    user = query.from_user
    test_data = context.user_data['test']
    
    await query.message.edit_text("üîÑ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–≤–æ–∏ –æ—Ç–≤–µ—Ç—ã...")
    await asyncio.sleep(2)
    
    await query.message.edit_text("üß† –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –±–∞–ª–ª—ã...")
    await asyncio.sleep(2)
    
    await query.message.edit_text("üìä –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–≤–æ–∏ —Å–∫–ª–æ–Ω–Ω–æ—Å—Ç–∏...")
    await asyncio.sleep(2)
    
    save_test_results(user.id, test_data['scores'])
    
    sorted_scores = sorted(test_data['scores'].items(), key=lambda x: x[1], reverse=True)
    top_categories = sorted_scores[:3]
    
    result_text = "üéâ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–∞—Ä—å–µ—Ä–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞\n\n"
    result_text += "üìä –¢–≤–æ–∏ —Å–∫–ª–æ–Ω–Ω–æ—Å—Ç–∏:\n\n"
    
    for i, (category, score) in enumerate(top_categories, 1):
        category_name = CAREER_CATEGORIES.get(category, category)
        percentage = (score / sum(test_data['scores'].values())) * 100 if sum(test_data['scores'].values()) > 0 else 0

        emoji_map = {
            "IT": "üíª",
            "CREATIVE": "üé®", 
            "BUSINESS": "üíº",
            "SCIENCE": "üî¨",
            "MEDICAL": "üè•",
            "TECHNICAL": "üîß",
            "SERVICE": "ü§ù"
        }
        
        emoji = emoji_map.get(category, "üìà")
        result_text += f"{emoji} {i}. {category_name} - {percentage:.1f}%\n"
    
    result_text += f"\n‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω! –û—Ç–≤–µ—Ç–æ–≤: {len(test_data['answers'])}/{len(test_data['questions'])}\n\n"
    result_text += "üí° –¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∞!"
    
    keyboard = [
        [InlineKeyboardButton("üí° –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", callback_data="recommendations")],
        [InlineKeyboardButton("üîç –ü–æ–∏—Å–∫ –ø—Ä–æ—Ñ–µ—Å—Å–∏–π", callback_data="search")],
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    
    await query.message.edit_text(
        result_text,
        parse_mode="Markdown",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    
    record_interaction(user.id, "test_completed", f"scores_{test_data['scores']}")
    context.user_data.pop('test', None)

async def handle_edit_age(query, context: ContextTypes.DEFAULT_TYPE):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ–∑—Ä–∞—Å—Ç–Ω–æ–π –≥—Ä—É–ø–ø—ã"""
    user = query.from_user
    record_interaction(user.id, "edit_age")
    
    await query.message.edit_text(
        "üë∂ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ–∑—Ä–∞—Å—Ç–Ω–æ–π –≥—Ä—É–ø–ø—ã\n\n"
        "–í—ã–±–µ—Ä–∏ –Ω–æ–≤—É—é –≤–æ–∑—Ä–∞—Å—Ç–Ω—É—é –≥—Ä—É–ø–ø—É:",
        parse_mode="Markdown",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("13-17 –ª–µ—Ç", callback_data="age_13_17")],
            [InlineKeyboardButton("18-24 –≥–æ–¥–∞", callback_data="age_18_24")],
            [InlineKeyboardButton("25-35 –ª–µ—Ç", callback_data="age_25_35")],
            [InlineKeyboardButton("36+ –ª–µ—Ç", callback_data="age_36_plus")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="edit_profile")]
        ])
    )

async def handle_edit_education(query, context: ContextTypes.DEFAULT_TYPE):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è"""
    user = query.from_user
    record_interaction(user.id, "edit_education")
    
    await query.message.edit_text(
        "üéì –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è\n\n"
        "–í—ã–±–µ—Ä–∏ –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è:",
        parse_mode="Markdown",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üè´ –®–∫–æ–ª–∞", callback_data="edu_school")],
            [InlineKeyboardButton("üéì –í–£–ó", callback_data="edu_university")],
            [InlineKeyboardButton("üìö –ö—É—Ä—Å—ã", callback_data="edu_courses")],
            [InlineKeyboardButton("üíº –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã", callback_data="edu_experience")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="edit_profile")]
        ])
    )

async def handle_edit_interests(query, context: ContextTypes.DEFAULT_TYPE):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤"""
    user = query.from_user
    record_interaction(user.id, "edit_interests")
    
    await query.message.edit_text(
        "‚ù§Ô∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤\n\n"
        "–ù–∞–ø–∏—à–∏ –Ω–æ–≤—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:",
        parse_mode="Markdown",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="edit_profile")]
        ])
    )
    
    context.user_data['editing_interests'] = True

async def handle_edit_skills(query, context: ContextTypes.DEFAULT_TYPE):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–≤—ã–∫–æ–≤"""
    user = query.from_user
    record_interaction(user.id, "edit_skills")
    
    await query.message.edit_text(
        "üõ†Ô∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–≤—ã–∫–æ–≤\n\n"
        "–ù–∞–ø–∏—à–∏ –Ω–æ–≤—ã–µ –Ω–∞–≤—ã–∫–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:",
        parse_mode="Markdown",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="edit_profile")]
        ])
    )
    
    context.user_data['editing_skills'] = True

async def handle_edit_current_job(query, context: ContextTypes.DEFAULT_TYPE):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Ä–∞–±–æ—Ç—ã"""
    user = query.from_user
    record_interaction(user.id, "edit_current_job")
    
    await query.message.edit_text(
        "üíº –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Ä–∞–±–æ—Ç—ã\n\n"
        "–ù–∞–ø–∏—à–∏ –Ω–æ–≤—É—é –ø—Ä–æ—Ñ–µ—Å—Å–∏—é –∏–ª–∏ '–ë–µ–∑—Ä–∞–±–æ—Ç–Ω—ã–π':",
        parse_mode="Markdown",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="edit_profile")]
        ])
    )
    
    context.user_data['editing_current_job'] = True

async def handle_edit_satisfaction(query, context: ContextTypes.DEFAULT_TYPE):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏"""
    user = query.from_user
    record_interaction(user.id, "edit_satisfaction")
    
    await query.message.edit_text(
        "üòä –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏\n\n"
        "–û—Ü–µ–Ω–∏ —Å–≤–æ—é —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç–æ–π (1-5):",
        parse_mode="Markdown",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üò¢ 1", callback_data="satisfaction_1"),
             InlineKeyboardButton("üòî 2", callback_data="satisfaction_2")],
            [InlineKeyboardButton("üòê 3", callback_data="satisfaction_3"),
             InlineKeyboardButton("üòä 4", callback_data="satisfaction_4")],
            [InlineKeyboardButton("üòç 5", callback_data="satisfaction_5")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="edit_profile")]
        ])
    )

async def handle_delete_profile(query, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è"""
    user = query.from_user
    record_interaction(user.id, "delete_profile_request")
    
    await query.message.edit_text(
        "‚ö†Ô∏è –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è\n\n"
        "–¢—ã —É–≤–µ—Ä–µ–Ω, —á—Ç–æ —Ö–æ—á–µ—à—å —É–¥–∞–ª–∏—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å?\n"
        "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!\n\n"
        "–í—Å–µ —Ç–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã: –ø—Ä–æ—Ñ–∏–ª—å, —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤, –∏—Å—Ç–æ—Ä–∏—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π.",
        parse_mode="Markdown",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üóëÔ∏è –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data="confirm_delete")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_delete")]
        ])
    )

async def handle_confirm_delete(query, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è"""
    user = query.from_user
    record_interaction(user.id, "profile_deleted")

    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()

    c.execute("DELETE FROM users WHERE user_id = ?", (user.id,))
    c.execute("DELETE FROM user_test_results WHERE user_id = ?", (user.id,))
    c.execute("DELETE FROM interactions WHERE user_id = ?", (user.id,))
    
    conn.commit()
    conn.close()
    
    await query.message.edit_text("üóëÔ∏è –£–¥–∞–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å...")
    await asyncio.sleep(1)
    
    await query.message.edit_text("‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!")
    await asyncio.sleep(1)
    
    await query.message.edit_text(
        "üëã –¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å —É–¥–∞–ª–µ–Ω.\n\n"
        "–ï—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å, –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /start",
        reply_markup=InlineKeyboardMarkup([[
            InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
        ]])
    )

async def handle_cancel_delete(query, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è"""
    user = query.from_user
    record_interaction(user.id, "delete_cancelled")
    
    await query.message.edit_text(
        "‚úÖ –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ!\n\n"
        "–¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω.",
        reply_markup=InlineKeyboardMarkup([[
            InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", callback_data="edit_profile"),
            InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
        ]])
    )

async def handle_text_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è"""
    user = update.effective_user
    text = update.message.text

    if context.user_data.get('waiting_for_search'):
        context.user_data['waiting_for_search'] = False
        await handle_search_query(update, context)
    elif context.user_data.get('waiting_for_vacancy_search'):
        context.user_data['waiting_for_vacancy_search'] = False
        await handle_vacancy_search(update, context)
    elif context.user_data.get('waiting_for_interests'):
        context.user_data['profile']['interests'] = text
        context.user_data['waiting_for_interests'] = False
        await update.message.reply_text("‚úÖ –ò–Ω—Ç–µ—Ä–µ—Å—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã! –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –Ω–∞–≤—ã–∫–∞–º...")
        await asyncio.sleep(1)
        await update.message.reply_text(
            "üõ†Ô∏è –®–∞–≥ 4/6: –ù–∞–≤—ã–∫–∏\n\n"
            "–ù–∞–ø–∏—à–∏ —Å–≤–æ–∏ –Ω–∞–≤—ã–∫–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: Python, Photoshop, –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫):",
            parse_mode="Markdown",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data="save_skills")],
                [InlineKeyboardButton("‚ùå –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_skills")]
            ])
        )
        context.user_data['waiting_for_skills'] = True
    elif context.user_data.get('waiting_for_skills'):
        context.user_data['profile']['skills'] = text
        context.user_data['waiting_for_skills'] = False
        await update.message.reply_text("‚úÖ –ù–∞–≤—ã–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã! –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —à–∞–≥—É...")
        await asyncio.sleep(1)
        await update.message.reply_text(
            "üíº –®–∞–≥ 5/6: –¢–µ–∫—É—â–∞—è —Ä–∞–±–æ—Ç–∞\n\n"
            "–ù–∞–ø–∏—à–∏ —Å–≤–æ—é —Ç–µ–∫—É—â—É—é –ø—Ä–æ—Ñ–µ—Å—Å–∏—é –∏–ª–∏ '–ë–µ–∑—Ä–∞–±–æ—Ç–Ω—ã–π' –µ—Å–ª–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—à—å:",
            parse_mode="Markdown",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data="save_current_job")],
                [InlineKeyboardButton("‚ùå –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_current_job")]
            ])
        )
        context.user_data['waiting_for_current_job'] = True
    elif context.user_data.get('waiting_for_current_job'):
        context.user_data['profile']['current_job'] = text
        context.user_data['waiting_for_current_job'] = False
        await update.message.reply_text("‚úÖ –¢–µ–∫—É—â–∞—è —Ä–∞–±–æ—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞! –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —à–∞–≥—É...")
        await asyncio.sleep(1)
        await update.message.reply_text(
            "üòä –®–∞–≥ 6/6: –£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç–æ–π\n\n"
            "–û—Ü–µ–Ω–∏ —Å–≤–æ—é —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç—å —Ç–µ–∫—É—â–µ–π —Ä–∞–±–æ—Ç–æ–π (1-5):",
            parse_mode="Markdown",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üò¢ 1", callback_data="satisfaction_1"),
                 InlineKeyboardButton("üòî 2", callback_data="satisfaction_2")],
                [InlineKeyboardButton("üòê 3", callback_data="satisfaction_3"),
                 InlineKeyboardButton("üòä 4", callback_data="satisfaction_4")],
                [InlineKeyboardButton("üòç 5", callback_data="satisfaction_5")],
                [InlineKeyboardButton("‚ùå –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_satisfaction")]
            ])
        )
    elif context.user_data.get('editing_interests'):
        profile = get_user_profile(user.id)
        if profile:
            profile['interests'] = text
            save_user_profile(user.id, user.first_name, user.username, profile)
            await update.message.reply_text("‚úÖ –ò–Ω—Ç–µ—Ä–µ—Å—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")
            await asyncio.sleep(1)
            await update.message.reply_text(
                "‚úèÔ∏è –ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω!",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –µ—â–µ", callback_data="edit_profile"),
                    InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
                ]])
            )
        context.user_data['editing_interests'] = False
    elif context.user_data.get('editing_skills'):
        profile = get_user_profile(user.id)
        if profile:
            profile['skills'] = text
            save_user_profile(user.id, user.first_name, user.username, profile)
            await update.message.reply_text("‚úÖ –ù–∞–≤—ã–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")
            await asyncio.sleep(1)
            await update.message.reply_text(
                "‚úèÔ∏è –ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω!",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –µ—â–µ", callback_data="edit_profile"),
                    InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
                ]])
            )
        context.user_data['editing_skills'] = False
    elif context.user_data.get('editing_current_job'):
        profile = get_user_profile(user.id)
        if profile:
            profile['current_job'] = text
            save_user_profile(user.id, user.first_name, user.username, profile)
            await update.message.reply_text("‚úÖ –¢–µ–∫—É—â–∞—è —Ä–∞–±–æ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
            await asyncio.sleep(1)
            await update.message.reply_text(
                "‚úèÔ∏è –ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω!",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –µ—â–µ", callback_data="edit_profile"),
                    InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
                ]])
            )
        context.user_data['editing_current_job'] = False
    else:
        await start_command(update, context)

def get_test_questions() -> List[Dict]:
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã"""
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute("""
    SELECT id, question_text, options, weights, category, order_num
    FROM test_questions ORDER BY order_num
    """)
    
    rows = c.fetchall()
    conn.close()
    
    questions = []
    for row in rows:
        questions.append({
            "id": row[0],
            "question_text": row[1],
            "options": row[2].split(","),
            "weights": row[3],
            "category": row[4],
            "order_num": row[5]
        })
    return questions

def save_test_results(user_id: int, results: Dict[str, int]):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞"""
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    
    c.execute("DELETE FROM user_test_results WHERE user_id = ?", (user_id,))
    
    now = datetime.utcnow().isoformat()
    for category, score in results.items():
        c.execute("""
        INSERT INTO user_test_results(user_id, category, score, test_date)
        VALUES(?,?,?,?)
        """, (user_id, category, score, now))
    
    conn.commit()
    conn.close()

def get_user_test_results(user_id: int) -> Optional[Dict[str, int]]:
    """–ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute("""
    SELECT category, score FROM user_test_results WHERE user_id = ?
    """, (user_id,))
    
    rows = c.fetchall()
    conn.close()
    
    if not rows:
        return None
    
    return {row[0]: row[1] for row in rows}

def get_careers_by_category(category: str = None) -> List[Dict]:
    """–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    
    if category:
        c.execute("""
        SELECT id, name, category, description, skills_required, education_level, 
               salary_range, tags, learning_resources
        FROM careers WHERE category = ?
        """, (category,))
    else:
        c.execute("""
        SELECT id, name, category, description, skills_required, education_level, 
               salary_range, tags, learning_resources
        FROM careers
        """)
    
    rows = c.fetchall()
    conn.close()
    
    careers = []
    for row in rows:
        careers.append({
            "id": row[0],
            "name": row[1],
            "category": row[2],
            "description": row[3],
            "skills_required": row[4].split(",") if row[4] else [],
            "education_level": row[5],
            "salary_range": row[6],
            "tags": row[7].split(",") if row[7] else [],
            "learning_resources": row[8].split(",") if row[8] else []
        })
    return careers

def search_careers(query: str) -> List[Dict]:
    """–ü–æ–∏—Å–∫ –ø—Ä–æ—Ñ–µ—Å—Å–∏–π –ø–æ –∑–∞–ø—Ä–æ—Å—É"""
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    
    search_term = f"%{query.lower()}%"
    c.execute("""
    SELECT id, name, category, description, skills_required, education_level, 
           salary_range, tags, learning_resources
    FROM careers 
    WHERE LOWER(name) LIKE ? OR LOWER(description) LIKE ? OR LOWER(tags) LIKE ? OR LOWER(skills_required) LIKE ?
    """, (search_term, search_term, search_term, search_term))
    
    rows = c.fetchall()
    conn.close()
    
    careers = []
    for row in rows:
        careers.append({
            "id": row[0],
            "name": row[1],
            "category": row[2],
            "description": row[3],
            "skills_required": row[4].split(",") if row[4] else [],
            "education_level": row[5],
            "salary_range": row[6],
            "tags": row[7].split(",") if row[7] else [],
            "learning_resources": row[8].split(",") if row[8] else []
        })
    return careers

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    print("Starting Career Advisor Bot...")
    
    init_database()
    print("Database initialized")
    
    seed_careers()
    seed_test_questions()
    
    application = Application.builder().token(BOT_TOKEN).build()
    
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("profile", profile_command))
    application.add_handler(CommandHandler("test", test_command))
    application.add_handler(CommandHandler("recommendations", recommendations_command))
    application.add_handler(CommandHandler("search", search_command))
    application.add_handler(CommandHandler("vacancies", vacancies_command))
    
    application.add_handler(CallbackQueryHandler(button_callback))
    
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text_message))

    search_conversation = ConversationHandler(
        entry_points=[CommandHandler("search", search_command)],
        states={
            SEARCH_QUERY: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_search_query)]
        },
        fallbacks=[CommandHandler("cancel", lambda u, c: ConversationHandler.END)]
    )
    application.add_handler(search_conversation)
    
    vacancy_conversation = ConversationHandler(
        entry_points=[CommandHandler("vacancies", vacancies_command)],
        states={
            SEARCH_QUERY: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_vacancy_search)]
        },
        fallbacks=[CommandHandler("cancel", lambda u, c: ConversationHandler.END)]
    )
    application.add_handler(vacancy_conversation)
    
    print("Bot started and ready to work!")
    application.run_polling()

async def handle_search_query(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞"""
    query = update.message.text
    user_id = update.effective_user.id
    
    record_interaction(user_id, "search_query", query)

    loading_msg = await update.message.reply_text(f"üîç –ò—â—É –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{query}'...")
    await asyncio.sleep(1)
    
    await loading_msg.edit_text("üìö –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—é –±–∞–∑—É –ø—Ä–æ—Ñ–µ—Å—Å–∏–π...")
    await asyncio.sleep(1)
    
    await loading_msg.edit_text("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è...")
    await asyncio.sleep(1)

    careers = search_careers(query)
    
    if not careers:
        await loading_msg.edit_text(
            f"üòî –ü–æ –∑–∞–ø—Ä–æ—Å—É '{query}' –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ! \n\n"
            "–ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞:\n"
            "‚Ä¢ '–ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç', '—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫'\n"
            "‚Ä¢ '–¥–∏–∑–∞–π–Ω', '—Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ'\n"
            "‚Ä¢ '–º–µ–¥–∏—Ü–∏–Ω–∞', '–≤—Ä–∞—á'\n"
            "‚Ä¢ '–±–∏–∑–Ω–µ—Å', '–º–µ–Ω–µ–¥–∂–µ—Ä'",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîç –ù–æ–≤—ã–π –ø–æ–∏—Å–∫", callback_data="search"),
                InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
            ]])
        )
        return

    await loading_msg.edit_text("‚ú® –ü—Ä–æ—Ñ–µ—Å—Å–∏–∏ –Ω–∞–π–¥–µ–Ω—ã!")
    await asyncio.sleep(1)

    text = f"üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{query}':\n\n"
    
    for i, career in enumerate(careers[:5], 1):
        category_emoji = {
            "IT –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏": "üíª",
            "–¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ –∏ –¥–∏–∑–∞–π–Ω": "üé®",
            "–ë–∏–∑–Ω–µ—Å –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ": "üíº",
            "–ù–∞—É–∫–∞ –∏ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ": "üî¨",
            "–ú–µ–¥–∏—Ü–∏–Ω–∞ –∏ –∑–¥–æ—Ä–æ–≤—å–µ": "üè•",
            "–†–∞–±–æ—á–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏": "üîß",
            "–°—Ñ–µ—Ä–∞ —É—Å–ª—É–≥": "ü§ù"
        }
        
        emoji = category_emoji.get(career['category'], "üìà")
        
        text += f"{emoji} {i}. {career['name']}\n"
        text += f"üìÇ {career['category']}\n"
        text += f"üí∞ {career['salary_range']} —Ä—É–±/–º–µ—Å\n"
        text += f"üìù {career['description'][:80]}...\n"
        
        if career['skills_required']:
            skills_text = ", ".join(career['skills_required'][:3])
            text += f"üõ†Ô∏è {skills_text}\n"
        
        text += f"üéì {career['education_level']}\n\n"
    
    if len(careers) > 5:
        text += f"... –∏ –µ—â–µ {len(careers) - 5} –ø—Ä–æ—Ñ–µ—Å—Å–∏–π\n\n"
    
    text += "üí° –•–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ? –ò—Å–ø–æ–ª—å–∑—É–π –ø–æ–∏—Å–∫ —Å –±–æ–ª–µ–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –∑–∞–ø—Ä–æ—Å–æ–º"
    
    keyboard = [
        [InlineKeyboardButton("üîç –ù–æ–≤—ã–π –ø–æ–∏—Å–∫", callback_data="search")],
        [InlineKeyboardButton("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", callback_data="recommendations")],
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    
    await loading_msg.edit_text(
        text,
        parse_mode="Markdown",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    
    return ConversationHandler.END

def search_hh_vacancies(query: str, limit: int = 5) -> List[Dict]:
    """–ü–æ–∏—Å–∫ –≤–∞–∫–∞–Ω—Å–∏–π –Ω–∞ HH.ru"""
    try:
        conn = sqlite3.connect(DB_PATH)
        c = conn.cursor()
        c.execute("""
        SELECT vacancy_data FROM parsed_vacancies 
        WHERE query = ? AND expires_at > ?
        """, (query, datetime.utcnow().isoformat()))
        
        cached_result = c.fetchone()
        if cached_result:
            conn.close()
            return json.loads(cached_result[0])

        params = {
            'text': query,
            'area': 1,
            'per_page': limit,
            'only_with_salary': True
        }
        
        response = requests.get(HH_API_URL, params=params, timeout=10)
        response.raise_for_status()
        
        data = response.json()
        vacancies = []
        
        for item in data.get('items', []):
            salary = item.get('salary', {})
            salary_text = "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
            
            if salary:
                from_salary = salary.get('from')
                to_salary = salary.get('to')
                currency = salary.get('currency', 'RUR')
                
                if from_salary and to_salary:
                    salary_text = f"{from_salary:,} - {to_salary:,} {currency}"
                elif from_salary:
                    salary_text = f"–æ—Ç {from_salary:,} {currency}"
                elif to_salary:
                    salary_text = f"–¥–æ {to_salary:,} {currency}"
            
            vacancy = {
                'name': item.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'),
                'company': item.get('employer', {}).get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–∞'),
                'salary': salary_text,
                'url': item.get('alternate_url', ''),
                'description': item.get('snippet', {}).get('requirement', '')[:100] + '...'
            }
            vacancies.append(vacancy)

        expires_at = (datetime.utcnow() + timedelta(hours=24)).isoformat()
        c.execute("""
        INSERT INTO parsed_vacancies(query, vacancy_data, created_at, expires_at)
        VALUES(?,?,?,?)
        """, (query, json.dumps(vacancies), datetime.utcnow().isoformat(), expires_at))
        
        conn.commit()
        conn.close()
        
        return vacancies
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–π: {e}")
        return []


async def handle_vacancy_search(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–π"""
    query = update.message.text
    user_id = update.effective_user.id
    
    record_interaction(user_id, "vacancy_search", query)

    loading_msg = await update.message.reply_text(f"üîç –ò—â—É –≤–∞–∫–∞–Ω—Å–∏–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{query}'...")
    await asyncio.sleep(1)
    
    await loading_msg.edit_text("üåê –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ HH.ru...")
    await asyncio.sleep(1)
    
    vacancies = search_hh_vacancies(query, limit=5)
    
    await loading_msg.edit_text("üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–∞–∫–∞–Ω—Å–∏–∏...")
    await asyncio.sleep(1)
    
    await loading_msg.edit_text("üíº –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã...")
    await asyncio.sleep(1)
    
    if not vacancies:
        await loading_msg.edit_text(
            f"üòî –ü–æ –∑–∞–ø—Ä–æ—Å—É '{query}' –≤–∞–∫–∞–Ω—Å–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–∞ HH.ru!\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π:\n"
            "‚Ä¢ –ë–æ–ª–µ–µ –æ–±—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã: '–ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç', '–º–µ–Ω–µ–¥–∂–µ—Ä', '—Å–≤–∞—Ä—â–∏–∫', '—Å—Ç—Ä–æ–∏—Ç–µ–ª—å', '–º–µ—Ö–∞–Ω–∏–∫', '—ç–ª–µ–∫—Ç—Ä–∏–∫', '–∏–Ω–∂–µ–Ω–µ—Ä'\n"
            "‚Ä¢ –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏: 'Python', 'JavaScript', 'C#', 'C++', 'SQL', 'HTML', 'CSS', 'React'\n"
            "‚Ä¢ –°—Ñ–µ—Ä—ã: '–º–∞—Ä–∫–µ—Ç–∏–Ω–≥', '–¥–∏–∑–∞–π–Ω', '–±–∏–∑–Ω–µ—Å', '–Ω–∞—É–∫–∞', '–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ', '–º–µ–¥–∏—Ü–∏–Ω–∞'",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîç –ù–æ–≤—ã–π –ø–æ–∏—Å–∫", callback_data="vacancies"),
                InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
            ]])
        )
        return

    await loading_msg.edit_text("‚ú® –í–∞–∫–∞–Ω—Å–∏–∏ –Ω–∞–π–¥–µ–Ω—ã!")
    await asyncio.sleep(1)

    text = f"üíº –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{query}' (HH.ru):\n\n"
    
    for i, vacancy in enumerate(vacancies, 1):
        text += f"{i}. {vacancy['name']}\n"
        text += f"üè¢ {vacancy['company']}\n"
        text += f"üí∞ {vacancy['salary']}\n"
        text += f"üìù {vacancy['description']}\n"
        text += f"üîó [–ü–æ–¥—Ä–æ–±–Ω–µ–µ]({vacancy['url']})\n\n"
    
    text += "üí° –î–∞–Ω–Ω—ã–µ HH.ru –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –∫–∞–∂–¥—ã–µ 24 —á–∞—Å–∞"
    
    keyboard = [
        [InlineKeyboardButton("üîç –ù–æ–≤—ã–π –ø–æ–∏—Å–∫", callback_data="vacancies")],
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    
    await loading_msg.edit_text(
        text,
        parse_mode="Markdown",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

    context.user_data.pop('search_platform', None)
    
    return ConversationHandler.END

if __name__ == "__main__":
    main()